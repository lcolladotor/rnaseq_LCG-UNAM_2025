[["index.html", "Intro RNA-seq LCG-UNAM 2025 Overview Code of Conduct Course Schedule External links Course Prerequisites Course Evaluation R session information License", " Intro RNA-seq LCG-UNAM 2025 Leonardo Collado-Torres Overview Here you can find the files for the January 2025 introduction to R, RStudio and RNA-sequencing (RNA-seq) course for LCG-UNAM at CCG-UNAM (January 28-31, 2025). The rest of the chapters will be in Spanish. Instructor: Leonardo Collado-Torres: team documentation website, Bluesky Teach assistants: Danna Ocampo Luna Bluesky Course Coordinators: Heladia Salgado Julio Collado Vides Download the materials for this course with usethis::use_course('lcolladotor/rnaseq_LCG-UNAM_2025') or view online at lcolladotor.github.io/rnaseq_LCG-UNAM_2025. Code of Conduct We’ll follow the CDSB code of conduct comunidadbioinfo.github.io/codigo-de-conducta/ as well as version 1.3.0 of the Bioconductor code of conduct bioconductor.github.io/bioc_coc_multilingual/. For reporting any violations of the code of conduct, report them to the Instructor and/or Course Coordinators. Course Schedule Local times in Cuernavaca, Mexico Tuesday January 28: 9-11 am: introduction to R, RStudio, usethis and here Making your own website with postcards activity led by Melissa Mayén Quiroz 12-2 pm: introduction to Bioconductor Wednesday January 29: 9-11 am: expression data R/Bioconductor objects and visualization: SummarizedExperiment and iSEE 12-2 pm: Downloading RNA-seq data using recount3 Thursday January 30: 9-11 am: statistical models with ExploreModelMatrix 12-2 pm: LieberInstitute/smoking-nicotine-mouse results + code by Daianna González Padilla. Looking beyond this course! Friday January 31: 9-11 am: differential expression analysis with limma 12-2 pm: review + R/Bioconductor-powered Team Data Science overview + open discussion (career paths, networking, etc) 2025 LIBD summer internship program: application closes ??. External links Cursos LCG GitHub source code Zoom (ask) LCG-UNAM RStudio server CDSB. Slack CDSB Mexico, in particular the intro_rnaseq_lcg_2025 channel. You can join this Slack workspace through this link. LieberInstitute/template_project Example real project (by Daianna): LieberInstitute/smoking-nicotine-mouse Course Prerequisites Install R 4.4.x from CRAN then install the following R packages: ## For installing Bioconductor packages if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) { install.packages(&quot;BiocManager&quot;) } ## Install required packages BiocManager::install( c( &quot;usethis&quot;, ## Utilities &quot;here&quot;, &quot;biocthis&quot;, &quot;lobstr&quot;, &quot;postcards&quot;, &quot;sessioninfo&quot;, &quot;SummarizedExperiment&quot;, ## Main containers / vis &quot;iSEE&quot;, &quot;edgeR&quot;, ## RNA-seq &quot;ExploreModelMatrix&quot;, &quot;limma&quot;, &quot;recount3&quot;, &quot;pheatmap&quot;, ## Visualization &quot;ggplot2&quot;, &quot;patchwork&quot;, &quot;RColorBrewer&quot;, &quot;ComplexHeatmap&quot;, &quot;spatialLIBD&quot; ## Advanced ) ) You will also need to install RStudio version RStudio 2024.12.0 or newer. Course Evaluation Participation (main evidence) written and/or verbal participation during class (optional, strongly encouraged for your own career) Community building: CDSB Slack (introduce yourself), Twitter, GitHub, etc. Public work (main evidence) Taking notes on GitHub (optional) Deploy an iSEE shiny app on shinyapps.io (advanced and optional) R package with notes following usethis::create_package() + biocthis::use_bioc_pkg_templates(). Final project (main evidence) code in a public GitHub repository (different from the notes one) following the structure from LieberInstitute/template_project (optional) a rendered Rmd file (RPubs, GitHub, etc) on a public URL (optional advanced) Copy this repository, remove all the Rmds except the index.Rmd and edit accordingly. GitHub Actions will then help you render it. You’ll need to fetch the gh-pages branch and at least make one commit for the HTML to be available such as this commit. You might also run into this GitHub default permission setting that you’ll need to change. The final grade will be a weighted average from the evaluation by the TA (20%), your public work (40%) and your final project (40%). Projects, public work and notes are due at 9 am US Eastern on Monday February 10th, though we recommend doing any work related to this course by Friday February 7th. R session information Details on the R version used for making this book. The source code is available at lcolladotor/rnaseq_LCG-UNAM_2025. ## Load the package at the top of your script library(&quot;sessioninfo&quot;) ## Utilities library(&quot;BiocStyle&quot;) library(&quot;biocthis&quot;) library(&quot;here&quot;) library(&quot;lobstr&quot;) library(&quot;postcards&quot;) library(&quot;usethis&quot;) library(&quot;sessioninfo&quot;) ## Main containers / vis library(&quot;SummarizedExperiment&quot;) library(&quot;iSEE&quot;) ## RNA-seq library(&quot;edgeR&quot;) library(&quot;ExploreModelMatrix&quot;) library(&quot;limma&quot;) library(&quot;recount3&quot;) ## Visualization library(&quot;ComplexHeatmap&quot;) library(&quot;ggplot2&quot;) library(&quot;patchwork&quot;) library(&quot;pheatmap&quot;) library(&quot;RColorBrewer&quot;) ## Advanced library(&quot;spatialLIBD&quot;) ## Reproducibility information options(width = 120) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.4.2 (2024-10-31) ## os Ubuntu 24.04.1 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz UTC ## date 2025-01-24 ## pandoc 3.6 @ /usr/bin/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-8 2024-09-12 [1] RSPM (R 4.4.0) ## AnnotationDbi 1.68.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## AnnotationHub 3.14.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## attempt 0.3.1 2020-05-03 [1] RSPM (R 4.4.0) ## beachmat 2.22.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## beeswarm 0.4.0 2021-06-01 [1] RSPM (R 4.4.0) ## benchmarkme 1.0.8 2022-06-12 [1] RSPM (R 4.4.0) ## benchmarkmeData 1.0.4 2020-04-23 [1] RSPM (R 4.4.0) ## Biobase * 2.66.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## BiocFileCache 2.14.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## BiocGenerics * 0.52.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## BiocIO 1.16.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## BiocManager 1.30.25 2024-08-28 [2] CRAN (R 4.4.2) ## BiocNeighbors 2.0.1 2024-11-28 [1] Bioconductor 3.20 (R 4.4.2) ## BiocParallel 1.40.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## BiocSingular 1.22.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## BiocStyle * 2.34.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## biocthis * 1.16.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## BiocVersion 3.20.0 2024-10-21 [2] Bioconductor 3.20 (R 4.4.2) ## Biostrings 2.74.1 2024-12-16 [1] Bioconductor 3.20 (R 4.4.2) ## bit 4.5.0.1 2024-12-03 [1] RSPM (R 4.4.0) ## bit64 4.6.0-1 2025-01-16 [1] RSPM (R 4.4.0) ## bitops 1.0-9 2024-10-03 [1] RSPM (R 4.4.0) ## blob 1.2.4 2023-03-17 [1] RSPM (R 4.4.0) ## bookdown 0.42 2025-01-07 [1] RSPM (R 4.4.0) ## bslib 0.8.0 2024-07-29 [2] RSPM (R 4.4.0) ## cachem 1.1.0 2024-05-16 [2] RSPM (R 4.4.0) ## circlize 0.4.16 2024-02-20 [1] RSPM (R 4.4.0) ## cli 3.6.3 2024-06-21 [2] RSPM (R 4.4.0) ## clue 0.3-66 2024-11-13 [1] RSPM (R 4.4.0) ## cluster 2.1.8 2024-12-11 [3] RSPM (R 4.4.0) ## codetools 0.2-20 2024-03-31 [3] CRAN (R 4.4.2) ## colorspace 2.1-1 2024-07-26 [1] RSPM (R 4.4.0) ## colourpicker 1.3.0 2023-08-21 [1] RSPM (R 4.4.0) ## ComplexHeatmap * 2.22.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## config 0.3.2 2023-08-30 [1] RSPM (R 4.4.0) ## cowplot 1.1.3 2024-01-22 [1] RSPM (R 4.4.0) ## crayon 1.5.3 2024-06-20 [2] RSPM (R 4.4.0) ## curl 6.2.0 2025-01-23 [2] RSPM (R 4.4.0) ## data.table 1.16.4 2024-12-06 [1] RSPM (R 4.4.0) ## DBI 1.2.3 2024-06-02 [1] RSPM (R 4.4.0) ## dbplyr 2.5.0 2024-03-19 [1] RSPM (R 4.4.0) ## DelayedArray 0.32.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## digest 0.6.37 2024-08-19 [2] RSPM (R 4.4.0) ## doParallel 1.0.17 2022-02-07 [1] RSPM (R 4.4.0) ## dotCall64 1.2 2024-10-04 [1] RSPM (R 4.4.0) ## dplyr 1.1.4 2023-11-17 [1] RSPM (R 4.4.0) ## DT 0.33 2024-04-04 [1] RSPM (R 4.4.0) ## edgeR * 4.4.1 2024-12-02 [1] Bioconductor 3.20 (R 4.4.2) ## evaluate 1.0.3 2025-01-10 [2] RSPM (R 4.4.0) ## ExperimentHub 2.14.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## ExploreModelMatrix * 1.18.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## farver 2.1.2 2024-05-13 [1] RSPM (R 4.4.0) ## fastmap 1.2.0 2024-05-15 [2] RSPM (R 4.4.0) ## fields 16.3 2024-09-30 [1] RSPM (R 4.4.0) ## filelock 1.0.3 2023-12-11 [1] RSPM (R 4.4.0) ## foreach 1.5.2 2022-02-02 [1] RSPM (R 4.4.0) ## fs 1.6.5 2024-10-30 [2] RSPM (R 4.4.0) ## generics 0.1.3 2022-07-05 [1] RSPM (R 4.4.0) ## GenomeInfoDb * 1.42.1 2024-11-28 [1] Bioconductor 3.20 (R 4.4.2) ## GenomeInfoDbData 1.2.13 2025-01-23 [1] Bioconductor ## GenomicAlignments 1.42.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## GenomicRanges * 1.58.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## GetoptLong 1.0.5 2020-12-15 [1] RSPM (R 4.4.0) ## ggbeeswarm 0.7.2 2023-04-29 [1] RSPM (R 4.4.0) ## ggplot2 * 3.5.1 2024-04-23 [1] RSPM (R 4.4.0) ## ggrepel 0.9.6 2024-09-07 [1] RSPM (R 4.4.0) ## GlobalOptions 0.1.2 2020-06-10 [1] RSPM (R 4.4.0) ## glue 1.8.0 2024-09-30 [2] RSPM (R 4.4.0) ## golem 0.5.1 2024-08-27 [1] RSPM (R 4.4.0) ## gridExtra 2.3 2017-09-09 [1] RSPM (R 4.4.0) ## gtable 0.3.6 2024-10-25 [1] RSPM (R 4.4.0) ## here * 1.0.1 2020-12-13 [1] RSPM (R 4.4.0) ## htmltools 0.5.8.1 2024-04-04 [2] RSPM (R 4.4.0) ## htmlwidgets 1.6.4 2023-12-06 [2] RSPM (R 4.4.0) ## httpuv 1.6.15 2024-03-26 [2] RSPM (R 4.4.0) ## httr 1.4.7 2023-08-15 [1] RSPM (R 4.4.0) ## igraph 2.1.4 2025-01-23 [1] RSPM (R 4.4.0) ## IRanges * 2.40.1 2024-12-05 [1] Bioconductor 3.20 (R 4.4.2) ## irlba 2.3.5.1 2022-10-03 [1] RSPM (R 4.4.0) ## iSEE * 2.18.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## iterators 1.0.14 2022-02-05 [1] RSPM (R 4.4.0) ## jquerylib 0.1.4 2021-04-26 [2] RSPM (R 4.4.0) ## jsonlite 1.8.9 2024-09-20 [2] RSPM (R 4.4.0) ## KEGGREST 1.46.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## knitr 1.49 2024-11-08 [2] RSPM (R 4.4.0) ## later 1.4.1 2024-11-27 [2] RSPM (R 4.4.0) ## lattice 0.22-6 2024-03-20 [3] CRAN (R 4.4.2) ## lazyeval 0.2.2 2019-03-15 [1] RSPM (R 4.4.0) ## lifecycle 1.0.4 2023-11-07 [2] RSPM (R 4.4.0) ## limma * 3.62.2 2025-01-09 [1] Bioconductor 3.20 (R 4.4.2) ## listviewer 4.0.0 2023-09-30 [1] RSPM (R 4.4.0) ## lobstr * 1.1.2 2022-06-22 [1] RSPM (R 4.4.0) ## locfit 1.5-9.10 2024-06-24 [1] RSPM (R 4.4.0) ## magick 2.8.5 2024-09-20 [1] RSPM (R 4.4.0) ## magrittr 2.0.3 2022-03-30 [2] RSPM (R 4.4.0) ## maps 3.4.2.1 2024-11-10 [1] RSPM (R 4.4.0) ## MASS 7.3-64 2025-01-04 [3] RSPM (R 4.4.0) ## Matrix 1.7-2 2025-01-23 [3] RSPM (R 4.4.0) ## MatrixGenerics * 1.18.1 2025-01-09 [1] Bioconductor 3.20 (R 4.4.2) ## matrixStats * 1.5.0 2025-01-07 [1] RSPM (R 4.4.0) ## memoise 2.0.1 2021-11-26 [2] RSPM (R 4.4.0) ## mgcv 1.9-1 2023-12-21 [3] CRAN (R 4.4.2) ## mime 0.12 2021-09-28 [2] RSPM (R 4.4.0) ## miniUI 0.1.1.1 2018-05-18 [2] RSPM (R 4.4.0) ## munsell 0.5.1 2024-04-01 [1] RSPM (R 4.4.0) ## nlme 3.1-166 2024-08-14 [3] CRAN (R 4.4.2) ## paletteer 1.6.0 2024-01-21 [1] RSPM (R 4.4.0) ## patchwork * 1.3.0 2024-09-16 [1] RSPM (R 4.4.0) ## pheatmap * 1.0.12 2019-01-04 [1] RSPM (R 4.4.0) ## pillar 1.10.1 2025-01-07 [2] RSPM (R 4.4.0) ## pkgconfig 2.0.3 2019-09-22 [2] RSPM (R 4.4.0) ## plotly 4.10.4 2024-01-13 [1] RSPM (R 4.4.0) ## png 0.1-8 2022-11-29 [1] RSPM (R 4.4.0) ## postcards * 0.2.3 2022-01-07 [1] RSPM (R 4.4.0) ## promises 1.3.2 2024-11-28 [2] RSPM (R 4.4.0) ## purrr 1.0.2 2023-08-10 [2] RSPM (R 4.4.0) ## R.cache 0.16.0 2022-07-21 [1] RSPM (R 4.4.0) ## R.methodsS3 1.8.2 2022-06-13 [1] RSPM (R 4.4.0) ## R.oo 1.27.0 2024-11-01 [1] RSPM (R 4.4.0) ## R.utils 2.12.3 2023-11-18 [1] RSPM (R 4.4.0) ## R6 2.5.1 2021-08-19 [2] RSPM (R 4.4.0) ## rappdirs 0.3.3 2021-01-31 [2] RSPM (R 4.4.0) ## RColorBrewer * 1.1-3 2022-04-03 [1] RSPM (R 4.4.0) ## Rcpp 1.0.14 2025-01-12 [2] RSPM (R 4.4.0) ## RCurl 1.98-1.16 2024-07-11 [1] RSPM (R 4.4.0) ## recount3 * 1.16.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## rematch2 2.1.2 2020-05-01 [1] RSPM (R 4.4.0) ## restfulr 0.0.15 2022-06-16 [1] RSPM (R 4.4.2) ## rintrojs 0.3.4 2024-01-11 [1] RSPM (R 4.4.0) ## rjson 0.2.23 2024-09-16 [1] RSPM (R 4.4.0) ## rlang 1.1.5 2025-01-17 [2] RSPM (R 4.4.0) ## rmarkdown 2.29 2024-11-04 [2] RSPM (R 4.4.0) ## rprojroot 2.0.4 2023-11-05 [2] RSPM (R 4.4.0) ## Rsamtools 2.22.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## RSQLite 2.3.9 2024-12-03 [1] RSPM (R 4.4.0) ## rstudioapi 0.17.1 2024-10-22 [2] RSPM (R 4.4.0) ## rsvd 1.0.5 2021-04-16 [1] RSPM (R 4.4.0) ## rtracklayer 1.66.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## S4Arrays 1.6.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## S4Vectors * 0.44.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## sass 0.4.9 2024-03-15 [2] RSPM (R 4.4.0) ## ScaledMatrix 1.14.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## scales 1.3.0 2023-11-28 [1] RSPM (R 4.4.0) ## scater 1.34.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## scuttle 1.16.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## sessioninfo * 1.2.2 2021-12-06 [2] RSPM (R 4.4.0) ## shape 1.4.6.1 2024-02-23 [1] RSPM (R 4.4.0) ## shiny 1.10.0 2024-12-14 [2] RSPM (R 4.4.0) ## shinyAce 0.4.3 2024-10-19 [1] RSPM (R 4.4.0) ## shinydashboard 0.7.2 2021-09-30 [1] RSPM (R 4.4.0) ## shinyjs 2.1.0 2021-12-23 [1] RSPM (R 4.4.0) ## shinyWidgets 0.8.7 2024-09-23 [1] RSPM (R 4.4.0) ## SingleCellExperiment * 1.28.1 2024-11-10 [1] Bioconductor 3.20 (R 4.4.2) ## spam 2.11-1 2025-01-20 [1] RSPM (R 4.4.0) ## SparseArray 1.6.1 2025-01-19 [1] Bioconductor 3.20 (R 4.4.2) ## SpatialExperiment * 1.16.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## spatialLIBD * 1.18.0 2024-11-07 [1] Bioconductor 3.20 (R 4.4.2) ## statmod 1.5.0 2023-01-06 [1] RSPM (R 4.4.0) ## styler 1.10.3 2024-04-07 [1] RSPM (R 4.4.0) ## SummarizedExperiment * 1.36.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## tibble 3.2.1 2023-03-20 [2] RSPM (R 4.4.0) ## tidyr 1.3.1 2024-01-24 [1] RSPM (R 4.4.0) ## tidyselect 1.2.1 2024-03-11 [1] RSPM (R 4.4.0) ## UCSC.utils 1.2.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## usethis * 3.1.0 2024-11-26 [2] RSPM (R 4.4.0) ## vctrs 0.6.5 2023-12-01 [2] RSPM (R 4.4.0) ## vipor 0.4.7 2023-12-18 [1] RSPM (R 4.4.0) ## viridis 0.6.5 2024-01-29 [1] RSPM (R 4.4.0) ## viridisLite 0.4.2 2023-05-02 [1] RSPM (R 4.4.0) ## withr 3.0.2 2024-10-28 [2] RSPM (R 4.4.0) ## xfun 0.50 2025-01-07 [2] RSPM (R 4.4.0) ## XML 3.99-0.18 2025-01-01 [1] RSPM (R 4.4.0) ## xtable 1.8-4 2019-04-21 [2] RSPM (R 4.4.0) ## XVector 0.46.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## yaml 2.3.10 2024-07-26 [2] RSPM (R 4.4.0) ## zlibbioc 1.52.0 2024-10-29 [1] Bioconductor 3.20 (R 4.4.2) ## ## [1] /__w/_temp/Library ## [2] /usr/local/lib/R/site-library ## [3] /usr/local/lib/R/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── proc.time() ## user system elapsed ## 10.702 0.933 11.303 This book was last updated at 2025-01-24 21:00:04.311426. License This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["introducción-a-r-y-rstudio.html", "1 Introducción a R y RStudio 1.1 R 1.2 GitHub 1.3 GitHub Education 1.4 RStudio 1.5 Material del curso 1.6 Actividad postcards", " 1 Introducción a R y RStudio 1.1 R R: es gratis, de acceso libre, utilizado para muchos campos de trabajo, fuerte en la bioinformática a través de Bioconductor Instalación a través de CRAN: https://cran.r-project.org/ Para explorar que se puede hacer con R: R Weekly https://rweekly.org/ R Bloggers https://www.r-bloggers.com/ Bluesky https://bsky.app/search?q=%23rstats Bluesky en español https://bsky.app/search?q=%23rstatsES TidyTuesday https://bsky.app/search?q=%23TidyTuesday Para pedir ayuda hay muchas opciones https://lcolladotor.github.io/bioc_team_ds/how-to-ask-for-help.html Material en el que estoy involucrado: https://twitter.com/lcolladotor (originalmente) https://bsky.app/profile/lcolladotor.bsky.social (principal medio actualmente) https://www.youtube.com/@lcolladotor LIBD rstats club https://docs.google.com/spreadsheets/d/1is8dZSd0FZ9Qi1Zvq1uRhm-P1McnJRd_zxdAfCRoMfA/edit?usp=sharing https://bsky.app/profile/cdsbmexico.bsky.social y https://bsky.app/profile/libdrstats.bsky.social 1.2 GitHub Permite compartir código Se complementa con Git que es para tener un control de versiones de tu código https://github.com/ComunidadBioInfo/cdsb2020/blob/master/presentaciones_flujos-de-trabajo/Introduccion-al-flujo-de-trabajo-orientado-a-proyectos.pdf Puedes tener páginas web estáticas https://pages.github.com/ https://github.com/lcolladotor/rnaseq_LCG-UNAM_2025. En especial https://github.com/lcolladotor/rnaseq_LCG-UNAM_2025/tree/gh-pages se convierte en http://lcolladotor.github.io/rnaseq_LCG-UNAM_2025/ Página personal: https://github.com/lcolladotor/lcolladotor.github.com se convierte en http://lcolladotor.github.io/. Está todo hecho con https://github.com/lcolladotor/lcolladotorsource Tip: usen el mismo nombre de usuario en GitHub, Twitter, Gmail, etc. How to be a Modern Scientist: https://lcolladotor.github.io/bioc_team_ds/how-to-be-a-modern-scientist.html 1.3 GitHub Education Es para obtener acceso gratiuto a GitHub Pro y GitHub Copilot. En https://github.com/education/students vienen los detalles y los pasos a seguir. Hagan su cuenta de GitHub usando su email de la LCG-UNAM (tiene que ser un email de una institución académica). Así podrán completar la solicitud para el GitHub Education pack vía https://education.github.com/discount_requests/application. Una vez que GitHub se los autorice podrán configurar su RStudio para usar GitHub Copilot siguiendo las instrucciones de https://docs.posit.co/ide/user/ide/guide/tools/copilot.html. Estos son los settings que uso en mi RStudio: 1.4 RStudio RStudio Desktop es gratis http://www.rstudio.com/products/rstudio/download/preview/ Nos ayuda a realizar muchas cosas con R de forma más rápida Demo rsthemes remotes::install_github(c( &quot;gadenbuie/rsthemes&quot; )) remotes::install_cran(&quot;suncalc&quot;) rsthemes::install_rsthemes(include_base16 = TRUE) usethis::edit_r_profile() ## From https://www.garrickadenbuie.com/project/rsthemes/ if (interactive() &amp;&amp; requireNamespace(&quot;rsthemes&quot;, quietly = TRUE)) { # Set preferred themes if not handled elsewhere.. rsthemes::set_theme_light(&quot;Solarized Light {rsthemes}&quot;) # light theme rsthemes::set_theme_dark(&quot;base16 Monokai {rsthemes}&quot;) # dark theme rsthemes::set_theme_favorite(c( &quot;Solarized Light {rsthemes}&quot;, &quot;base16 Monokai {rsthemes}&quot;, &quot;One Dark {rsthemes}&quot; )) # Whenever the R session restarts inside RStudio... setHook(&quot;rstudio.sessionInit&quot;, function(isNewSession) { # Automatically choose the correct theme based on time of day ## Used rsthemes::geolocate() once rsthemes::use_theme_auto(lat = 39.2891, lon = -76.5583) }, action = &quot;append&quot;) } ## https://blog.rstudio.com/2013/06/10/rstudio-cran-mirror/ options(repos = c(CRAN = &quot;https://cloud.r-project.org&quot;)) Es actualizado con bastante frecuencia RStudio cheatsheets https://posit.co/resources/cheatsheets/ https://posit.co/wp-content/uploads/2022/10/rstudio-ide-1.pdf RStudio projects: usalos para organizar tu código https://github.com/ComunidadBioInfo/cdsb2020/blob/master/presentaciones_flujos-de-trabajo/Trabajando-con-proyectos.pdf usethis::create_project(&quot;~/rnaseq_2025_notas&quot;) ## Start a setup file usethis::use_r(&quot;01-notas.R&quot;) O por ejemplo el archivo 02-visualizar-mtcars.R ## Creemos el archivo R/02-visualizar-mtcars.R usethis::use_r(&quot;02-visualizar-mtcars.R&quot;) con el siguiente contenido: library(&quot;sessioninfo&quot;) library(&quot;here&quot;) library(&quot;ggplot2&quot;) ## Hello world print(&quot;Soy Leo&quot;) ## Directorios dir_plots &lt;- here::here(&quot;figuras&quot;) dir_rdata &lt;- here::here(&quot;processed-data&quot;) ## Crear directorio para las figuras y archivos dir.create(dir_plots, showWarnings = FALSE) dir.create(dir_rdata, showWarnings = FALSE) ## Hacer una imagen de ejemplo pdf(file.path(dir_plots, &quot;mtcars_gear_vs_mpg.pdf&quot;), useDingbats = FALSE ) ggplot(mtcars, aes(group = gear, y = mpg)) + geom_boxplot() dev.off() ## Para reproducir mi código options(width = 120) sessioninfo::session_info() Un video de mi club de R sobre RStudio y el uso de here: También hay videos en el canal de YouTube de la CDSB sobre here como pueden ver aquí. Para una guía más detallada de cómo organizar tus archivos, revisa https://lcolladotor.github.io/bioc_team_ds/organizing-your-work.html#.YflDV-rMJD8. En particular, LieberInstitute/template_project. Acá está la guía de mi equipo de configuración de R: https://lcolladotor.github.io/bioc_team_ds/config-files.html#r-setup. Configura usethis con GitHub vía https://usethis.r-lib.org/articles/articles/git-credentials.html ## Para poder conectar tu compu con GitHub usethis::create_github_token() ## Abrirá una página web, escoje un nombre único ## y luego da click en el botón verde al final. Después copia el token ## (son 40 caracteres) Para Mac o Windows: gitcreds::gitcreds_set() ## Ojo, copia el token, no tu password de git! ## Si no, terminaras en la situación descrita en ## https://github.com/r-lib/usethis/issues/1347 Para Linux: En el servidor de RStudio de la LCG-UNAM no funciona bien gitcreds::gitcreds_set() (porque esa función solo corre bien en macOS o winOS) así que tenemos que editar el archivo .Renviron donde nuestro token no se guarda de forma privada, y por lo cual hoy en día no es lo que recomienda Jenny Bryan. Pero es lo que funciona en este caso tal como lo hablamos con el autor de gitcreds vía GitHub. Usando el siguiente comando podemos abrir el archivo .Renviron. usethis::edit_r_environ() Después guarden su token de GitHub usando la siguiente sintáxis (ojo con la línea en blanco al final, las mayúsculas al inicio, y el que no hay espacios antes y después del =). GITHUB_PAT=TU_CLAVE_DE_40_LETRAS Después de guardar el .Renviron, vayan a Session hasta arriba y reinicien la sesión de R para que se cargue el .Renviron antes de continuar. Continuemos con tu configuración de GitHub ## Configura tu usuario de GitHub usethis::edit_git_config() [user] name = Leonardo Collado Torres email = lcolladotor@gmail.com ## Para inicializar el repositorio de Git usethis::use_git() ## Para conectar tu repositorio local de Git con los servidores de GitHub usethis::use_github() Resultado ejemplo: https://github.com/lcolladotor/rnaseq_2021_notas. El que hice en vivo está disponible vía https://github.com/lcolladotor/rnaseq_2025_notas_en_vivo. Una vez que termines, agrega la liga al repositorio con tus notas del curso en el la página del curso. 1.5 Material del curso Pueden descargar la versión estática con usethis::use_course('lcolladotor/rnaseq_LCG-UNAM_2025') Pueden verlo en línea a través de lcolladotor.github.io/rnaseq_LCG-UNAM_2025 Pueden clonarlo desde GitHub de tal forma que podrán actualizarlo fácilmente usando git pull git clone https://github.com/lcolladotor/rnaseq_LCG-UNAM_2025.git ## Si tienen su SSH key configurarda pueden usar ## Info sobre SSH keys de GitHub: ## https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent git clone git@github.com:lcolladotor/rnaseq_LCG-UNAM_2025.git O desde R con: ## Opción más nueva: library(&quot;gert&quot;) repo &lt;- git_clone( &quot;https://github.com/lcolladotor/rnaseq_LCG-UNAM_2025&quot;, &quot;~/Desktop/rnaseq_LCG-UNAM_2025&quot; ) setwd(repo) ## Otra opción: git2r::clone( &quot;https://github.com/lcolladotor/rnaseq_LCG-UNAM_2025&quot;, &quot;~/Desktop/rnaseq_LCG-UNAM_2025&quot; ) 1.6 Actividad postcards Impartida por Melissa Mayén Quiroz 30/01/2024 Repositorio de GitHub para la actividad de Postcards: https://github.com/Melii99/rnaseq_2024_postcards En el mismo se encuentran las diapositivas: https://github.com/Melii99/rnaseq_2024_postcards/blob/master/Postcards_Diapositivas.pdf 1.6.1 Create Beautiful, Simple Personal Websites A collection of R Markdown templates for creating simple and easy to personalize single page websites. “El objetivo del paquete es facilitar que cualquier persona pueda crear un sitio web personal de una sola página con un documento R Markdown.” Autor: Sean Kross [aut, cre] Maintainer: Sean Kross &lt;sean at seankross.com&gt; https://CRAN.R-project.org/package=postcards GitHub: https://github.com/seankross/postcards Similar a https://pages.github.com/ Tu página web debe describir decir algo sobre ti, tus intereses, y tus proyectos además de cómo contactarte Algunos ejemplos: https://amy-peterson.github.io/ vía https://github.com/amy-peterson/amy-peterson.github.com http://jtleek.com/ vía https://github.com/jtleek/jtleek.github.io http://aejaffe.com/ vía https://github.com/andrewejaffe/andrewejaffe.github.io https://hadley.nz/ vía https://github.com/hadley/hadley.github.com https://emarquezz.github.io/ vía https://github.com/emarquezz/emarquezz.github.io https://bpardo99.github.io/ vía https://github.com/bpardo99/bpardo99.github.io https://daianna21.github.io/ vía https://github.com/daianna21/daianna21.github.io. https://reneegf.github.io/ vía https://github.com/reneegf/reneegf.github.io. https://cfausto.github.io/ vía https://github.com/cfausto/cfausto.github.io/. https://davidgonilski.github.io/ vía https://github.com/davidgonilski/davidgonilski.github.io. También pueden revisar https://lcolladotor.github.io/jhustatcomputing/projects/project-0/. 1.6.2 Instalación ## Puedes instalar Postcards con el siguiente comando: install.packages(&quot;postcards&quot;) ## O puedes instalar la última versión en desarrollo: remotes::install_github(&quot;seankross/postcards@main&quot;) 1.6.3 Plantillas Postcards incluye cinco plantillas: Jolla, Jolla Blue, Trestles, Onofre y Solana. Cada sitio está optimizado para ser visualizado tanto en computadoras de escritorio como en dispositivos móviles. El objetivo del paquete es facilitar que cualquier persona pueda crear un sitio web personal de una sola página con un documento R Markdown Jolla Jolla Blue Trestles Onofre Solana Para comenzar a personalizar una de estas plantillas, debes crear un nuevo proyecto. 1.6.4 Crear un nuevo proyecto en RStudio (selección interactiva) Si usas RStudio: selecciona “File”, “New Project”… Elige “New Directory”, “Postcards Website” Ingresar un nombre de directorio para tu proyecto en RStudio (“Tu_Usuario.github.io”) Elegir una de las plantillas desde un menú desplegable Selecciona “Create Project” después de elegir un nombre para la carpeta que contendrá tu sitio. Esta carpeta contendrá dos archivos importantes: Un documento R Markdown con el contenido de tu sitio Una foto de muestra que debes reemplazar” 1.6.5 Crear un nuevo proyecto ## Crearun nuevo proyecto usethis::create_project(&quot;Su_Usuario.github.io&quot;) 1.6.6 Configurar Git y GitHub Para poder guardar los cambios es necesario configurar Git y GitHub ## Configurar Git y GitHub usethis::use_git() # Reiniciar la sesión usethis::use_github() 1.6.7 Elegir una plantilla ## Elegir solo una plantilla (la que más te guste) postcards::create_postcard(template = &quot;jolla&quot;) postcards::create_postcard(template = &quot;jolla-blue&quot;) postcards::create_postcard(template = &quot;trestles&quot;) postcards::create_postcard(template = &quot;onofre&quot;) postcards::create_postcard(template = &quot;solana&quot;) De esta manera también se obtienen los 2 archivos importantes: Un documento R Markdown con el contenido de tu sitio Una foto de muestra que debes reemplazar 1.6.8 Editar con su información Ahora deberán editar el documento R Markdown con su información y reemplazar la imágen con la que elijan :) Llenen su información usando el formato Markdown. Por ejemplo https://github.com/andrewejaffe/andrewejaffe.github.io/blob/master/index.Rmd#L17-L31. Agreguen sus perfiles estilo https://github.com/andrewejaffe/andrewejaffe.github.io/blob/master/index.Rmd#L7-L12 1.6.9 Desplegar la página Para compilar el archivo HTML autocontenido para el sitio: En RStudio puedes utilizar el botón “Knit” o directamente: ## Desplegar la página GitHub rmarkdown::render(&quot;index.Rmd&quot;) 1.6.10 Compartan su página Sientanse libres de compartir su página con el mundo. Si usan Bluesky, usen el hashtag #postcards y etiqueten al autor @seankross.com https://bsky.app/profile/seankross.com. "],["introducción-a-bioconductor.html", "2 Introducción a Bioconductor 2.1 Encontrando paquetes de Bioconductor 2.2 Estructura de un paquete de BioC 2.3 Las dos ramas de Bioconductor: release y devel 2.4 Cursos y eventos 2.5 Comunidad 2.6 Ejercicio grupal", " 2 Introducción a Bioconductor Original Notes in English Bioconductor, the R package repository for the “analysis and comprehension of high-throughput genomic data” http://bioconductor.org/ Blog post que escribí en 2014: Where do I start using Bioconductor? http://lcolladotor.github.io/2014/10/16/startbioc/#.XqxNGRNKiuo Sobre Bioconductor: http://bioconductor.org/about/ Fui parte (04/2020- 04/2023) del Community Advisory Board http://bioconductor.org/about/community-advisory-board/ ^^ Artículos principales 2004 artículo: http://genomebiology.com/content/pdf/gb-2004-5-10-r80.pdf 2005 libro: https://www.amazon.com/Bioinformatics-Computational-Solutions-Bioconductor-Statistics/dp/0387251464 2015 artículo: http://www.nature.com/nmeth/journal/v12/n2/abs/nmeth.3252.html 2.1 Encontrando paquetes de Bioconductor Tipos de paquetes de Bioconductor: Software: tipo de paquete principal; la mayoría los hacen usuarios aunque algunos los hacen gente pagada directamente por Bioconductor Annotation: facilitan el interactuar con bases de datos de anotación Experiment Data: contienen datos para algún artículo o datos que se usan en ejemplos más exhaustivos Workflows: demuestran como puedes usar varios paquetes de Bioconductor para ciertos tipos de análisis Para descubrir paquetes: Software: http://bioconductor.org/packages/release/bioc/ Annotation: http://bioconductor.org/packages/release/data/annotation/ Experiment Data: http://bioconductor.org/packages/release/data/experiment/ Workflows: http://bioconductor.org/packages/release/workflows/ Paquetes de R de Leo: https://lcolladotor.github.io/pkgs/ Encontrando paquetes a través de biocViews: http://bioconductor.org/packages/release/BiocViews.html#___Software Estructura tipo árbol Son 4 árboles principales: software, annotation, experiment, workflow Dentro de cada árbol, un paquete puede ser parte de varias ramas Tiene una búsqueda de texto simple Ejemplo: Software → WorkflowStep → Visualization → http://bioconductor.org/packages/release/BiocViews.html#___Visualization 486 paquetes en BioC 3.11 abril-octubre 2020 506 en BioC 3.12 octubre 2020-abril 2021 536 en BioC 3.14 octubre 2021-abril 2022 542 en BioC 3.16 octubre 2022-abril 2023 558 en BioC 3.18 octubre 2023-abril 2024 566 en BioC 3.20 octubre 2024-abril 2025 2.2 Estructura de un paquete de BioC Usa https://bioconductor.org/packages/&lt;pkg_name&gt; Ejemplo: https://bioconductor.org/packages/recount Otro ejemplo: https://bioconductor.org/packages/SummarizedExperiment Badges (etiquetas): rápidamente podemos evaluar como está Parráfo de descripción del paquete Cómo citar al paquete de Bioconductor Cómo instalarlo. Más detalles en http://bioconductor.org/install/ Documentación Una líga por cada vignette en formato PDF o HTML. ¡Es la documentación principal! Una vignette es donde lxs autores del paquete explican cómo usar las diferentes funciones del paquete y en qué orden Detalles Términos de biocViews Cómo se relaciona a otros paquetes (depends, imports, linking to, suggests, depends on me, …) URL: donde puedes encontrar el código fuente BugReports: donde puedes pedir ayuda Más detalles sobre el paquete Estadísticas de descargas 2.3 Las dos ramas de Bioconductor: release y devel Dos ramas release, actualmente 3.20 devel, actualmente 3.21 Ejemplo: http://bioconductor.org/packages/devel/bioc/html/recount.html Bioconductor es actualizado cada 6 meses (abril y octubre). R lo actualizan 1 vez al año (abril). Todo el software lo prueban en macOS, Windows y linux Ejemplo: http://bioconductor.org/checkResults/release/bioc-LATEST/recount/ y http://bioconductor.org/checkResults/devel/bioc-LATEST/recount/ Resumen BioC 3.20 http://bioconductor.org/news/bioc_3_20_release/ Blog post en LIBD rstats club: Quick overview on the new Bioconductor 3.8 release http://research.libd.org/rstatsclub/2018/11/02/quick-overview-on-the-new-bioconductor-3-8-release/ 2.4 Cursos y eventos http://bioconductor.org/help/events/ http://bioconductor.org/help/course-materials/ BioC2025: conferencia principal anual https://www.linkedin.com/posts/bioconductor_gbcc2025-bioconductor-galaxy-activity-7236739126190829569-QdEH El que ayudo a organizar en México: eventos CDSB https://comunidadbioinfo.github.io/#events (inglés) y https://comunidadbioinfo.github.io/es/#events (español) 2.5 Comunidad Slack: https://join.slack.com/t/community-bioc/shared_invite/zt-2yja08h1g-9GY3MuoIU3IXEl6ObJlhxg Sitio web de ayuda: https://support.bioconductor.org/ Usa la(s) etiqueta(s) adecuada(s) para que lxs autores de los paquetes reciban email de forma automática Ejemplo: https://support.bioconductor.org/tag/recount3/ Pueden revisar ese sitio web y usarlo para aprender cómo en https://lcolladotor.github.io/bioc_team_ds/helping-others.html#bioconductor-support-practice-grounds Bluesky: https://bsky.app/profile/bioconductor.bsky.social Twitter: https://twitter.com/bioconductor. Desde diciembre 2023 ya no lo mantienen como lo explicaron en https://blog.bioconductor.org/posts/2023-11-17-twitter-exit/. 2.6 Ejercicio grupal Exploren en http://bioconductor.org/news/bioc_3_20_release/ la lista de nuevos paquetes de Bioconductor (BioC 3.20) Cada quien escoja un paquete o dos Exploren la documentación del paquete, si es que está pasando las pruebas en los diferentes sistemas operativos, si es que lxs autores han respondido a las preguntas de lxs usuarixs, etc. Discutan cuales paquetes les interesaron más como equipo y escriban un resumen de su discusión en sus notas en GitHub. Ejemplo de una actividad similar: Today was different, so no video. We used breakout rooms to work in pairs &amp; highlight new @Bioconductor 3.12 📦s in a spreadsheet, then we chatted about themhttps://t.co/GDVDmGshIr125 new software 📦s + much more! Lots of new toys to look at!https://t.co/C4qXfrQMm7#rstats pic.twitter.com/niGUP6Tns8 — LIBD rstats club (@LIBDrstats) November 6, 2020 At the end of October we did a \"@Bioconductor 3.14 release overview\" led by @lcolladotorThere's lots of new interesting packages out there! #rstats📔 https://t.co/PAfcnAGN9a📹 https://t.co/w8o8BxoBBo — LIBD rstats club (@LIBDrstats) December 1, 2021 (Opcional) Escriban en Bluesky promocionando el paquete que más les gustó y etiqueten a lxs autores si es que están en Bluesky. Está plática de Mara Averick para rstudio::conf(2018) explica cómo comunicar información vía tweets https://rstudio.com/resources/rstudioconf-2018/phrasing-communicating-data-science-through-tweets-gifs-and-classic-misdirection/. "],["objetos-de-bioconductor-para-datos-de-expresión.html", "3 Objetos de Bioconductor para datos de expresión 3.1 SummarizedExperiment 3.2 Ejercicio 3.3 iSEE 3.4 Ejercicio con spatialLIBD 3.5 Comunidad", " 3 Objetos de Bioconductor para datos de expresión 3.1 SummarizedExperiment Original notes in English rnaseqGene workflow http://bioconductor.org/packages/release/BiocViews.html#___Workflow http://bioconductor.org/packages/rnaseqGene http://bioconductor.org/packages/release/workflows/vignettes/rnaseqGene/inst/doc/rnaseqGene.html SummarizedExperiment https://www.nature.com/articles/nmeth.3252 Figure 2 http://bioconductor.org/packages/SummarizedExperiment Introducción a SummarizedExperiment: - http://bioconductor.org/packages/release/bioc/vignettes/SummarizedExperiment/inst/doc/SummarizedExperiment.html Extendiendo SummarizedExperiment: http://bioconductor.org/packages/release/bioc/vignettes/SummarizedExperiment/inst/doc/Extensions.html GenomicRanges http://bioconductor.org/packages/GenomicRanges https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003118 Introducción a GenomicRanges: http://bioconductor.org/packages/release/bioc/vignettes/GenomicRanges/inst/doc/GenomicRangesIntroduction.html rtracklayer http://bioconductor.org/packages/rtracklayer http://bioconductor.org/packages/release/bioc/vignettes/rtracklayer/inst/doc/rtracklayer.pdf Formato de archivos BED https://genome.ucsc.edu/FAQ/FAQformat.html#format1 Formato de archivos GTF https://useast.ensembl.org/info/website/upload/gff.html ## Lets build our first SummarizedExperiment object library(&quot;SummarizedExperiment&quot;) ## ?SummarizedExperiment ## De los ejemplos en la ayuda oficial ## Creamos los datos para nuestro objeto de tipo SummarizedExperiment ## para 200 genes a lo largo de 6 muestras nrows &lt;- 200 ncols &lt;- 6 ## Números al azar de cuentas set.seed(20210223) counts &lt;- matrix(runif(nrows * ncols, 1, 1e4), nrows) ## Información de nuestros genes rowRanges &lt;- GRanges( rep(c(&quot;chr1&quot;, &quot;chr2&quot;), c(50, 150)), IRanges(floor(runif(200, 1e5, 1e6)), width = 100), strand = sample(c(&quot;+&quot;, &quot;-&quot;), 200, TRUE), feature_id = sprintf(&quot;ID%03d&quot;, 1:200) ) names(rowRanges) &lt;- paste0(&quot;gene_&quot;, seq_len(length(rowRanges))) ## Información de nuestras muestras colData &lt;- DataFrame( Treatment = rep(c(&quot;ChIP&quot;, &quot;Input&quot;), 3), row.names = LETTERS[1:6] ) ## Juntamos ahora toda la información en un solo objeto de R rse &lt;- SummarizedExperiment( assays = SimpleList(counts = counts), rowRanges = rowRanges, colData = colData ) ## Exploremos el objeto resultante rse ## class: RangedSummarizedExperiment ## dim: 200 6 ## metadata(0): ## assays(1): counts ## rownames(200): gene_1 gene_2 ... gene_199 gene_200 ## rowData names(1): feature_id ## colnames(6): A B ... E F ## colData names(1): Treatment ## Número de genes y muestras dim(rse) ## [1] 200 6 ## IDs de nuestros genes y muestras dimnames(rse) ## [[1]] ## [1] &quot;gene_1&quot; &quot;gene_2&quot; &quot;gene_3&quot; &quot;gene_4&quot; &quot;gene_5&quot; &quot;gene_6&quot; &quot;gene_7&quot; &quot;gene_8&quot; &quot;gene_9&quot; &quot;gene_10&quot; ## [11] &quot;gene_11&quot; &quot;gene_12&quot; &quot;gene_13&quot; &quot;gene_14&quot; &quot;gene_15&quot; &quot;gene_16&quot; &quot;gene_17&quot; &quot;gene_18&quot; &quot;gene_19&quot; &quot;gene_20&quot; ## [21] &quot;gene_21&quot; &quot;gene_22&quot; &quot;gene_23&quot; &quot;gene_24&quot; &quot;gene_25&quot; &quot;gene_26&quot; &quot;gene_27&quot; &quot;gene_28&quot; &quot;gene_29&quot; &quot;gene_30&quot; ## [31] &quot;gene_31&quot; &quot;gene_32&quot; &quot;gene_33&quot; &quot;gene_34&quot; &quot;gene_35&quot; &quot;gene_36&quot; &quot;gene_37&quot; &quot;gene_38&quot; &quot;gene_39&quot; &quot;gene_40&quot; ## [41] &quot;gene_41&quot; &quot;gene_42&quot; &quot;gene_43&quot; &quot;gene_44&quot; &quot;gene_45&quot; &quot;gene_46&quot; &quot;gene_47&quot; &quot;gene_48&quot; &quot;gene_49&quot; &quot;gene_50&quot; ## [51] &quot;gene_51&quot; &quot;gene_52&quot; &quot;gene_53&quot; &quot;gene_54&quot; &quot;gene_55&quot; &quot;gene_56&quot; &quot;gene_57&quot; &quot;gene_58&quot; &quot;gene_59&quot; &quot;gene_60&quot; ## [61] &quot;gene_61&quot; &quot;gene_62&quot; &quot;gene_63&quot; &quot;gene_64&quot; &quot;gene_65&quot; &quot;gene_66&quot; &quot;gene_67&quot; &quot;gene_68&quot; &quot;gene_69&quot; &quot;gene_70&quot; ## [71] &quot;gene_71&quot; &quot;gene_72&quot; &quot;gene_73&quot; &quot;gene_74&quot; &quot;gene_75&quot; &quot;gene_76&quot; &quot;gene_77&quot; &quot;gene_78&quot; &quot;gene_79&quot; &quot;gene_80&quot; ## [81] &quot;gene_81&quot; &quot;gene_82&quot; &quot;gene_83&quot; &quot;gene_84&quot; &quot;gene_85&quot; &quot;gene_86&quot; &quot;gene_87&quot; &quot;gene_88&quot; &quot;gene_89&quot; &quot;gene_90&quot; ## [91] &quot;gene_91&quot; &quot;gene_92&quot; &quot;gene_93&quot; &quot;gene_94&quot; &quot;gene_95&quot; &quot;gene_96&quot; &quot;gene_97&quot; &quot;gene_98&quot; &quot;gene_99&quot; &quot;gene_100&quot; ## [101] &quot;gene_101&quot; &quot;gene_102&quot; &quot;gene_103&quot; &quot;gene_104&quot; &quot;gene_105&quot; &quot;gene_106&quot; &quot;gene_107&quot; &quot;gene_108&quot; &quot;gene_109&quot; &quot;gene_110&quot; ## [111] &quot;gene_111&quot; &quot;gene_112&quot; &quot;gene_113&quot; &quot;gene_114&quot; &quot;gene_115&quot; &quot;gene_116&quot; &quot;gene_117&quot; &quot;gene_118&quot; &quot;gene_119&quot; &quot;gene_120&quot; ## [121] &quot;gene_121&quot; &quot;gene_122&quot; &quot;gene_123&quot; &quot;gene_124&quot; &quot;gene_125&quot; &quot;gene_126&quot; &quot;gene_127&quot; &quot;gene_128&quot; &quot;gene_129&quot; &quot;gene_130&quot; ## [131] &quot;gene_131&quot; &quot;gene_132&quot; &quot;gene_133&quot; &quot;gene_134&quot; &quot;gene_135&quot; &quot;gene_136&quot; &quot;gene_137&quot; &quot;gene_138&quot; &quot;gene_139&quot; &quot;gene_140&quot; ## [141] &quot;gene_141&quot; &quot;gene_142&quot; &quot;gene_143&quot; &quot;gene_144&quot; &quot;gene_145&quot; &quot;gene_146&quot; &quot;gene_147&quot; &quot;gene_148&quot; &quot;gene_149&quot; &quot;gene_150&quot; ## [151] &quot;gene_151&quot; &quot;gene_152&quot; &quot;gene_153&quot; &quot;gene_154&quot; &quot;gene_155&quot; &quot;gene_156&quot; &quot;gene_157&quot; &quot;gene_158&quot; &quot;gene_159&quot; &quot;gene_160&quot; ## [161] &quot;gene_161&quot; &quot;gene_162&quot; &quot;gene_163&quot; &quot;gene_164&quot; &quot;gene_165&quot; &quot;gene_166&quot; &quot;gene_167&quot; &quot;gene_168&quot; &quot;gene_169&quot; &quot;gene_170&quot; ## [171] &quot;gene_171&quot; &quot;gene_172&quot; &quot;gene_173&quot; &quot;gene_174&quot; &quot;gene_175&quot; &quot;gene_176&quot; &quot;gene_177&quot; &quot;gene_178&quot; &quot;gene_179&quot; &quot;gene_180&quot; ## [181] &quot;gene_181&quot; &quot;gene_182&quot; &quot;gene_183&quot; &quot;gene_184&quot; &quot;gene_185&quot; &quot;gene_186&quot; &quot;gene_187&quot; &quot;gene_188&quot; &quot;gene_189&quot; &quot;gene_190&quot; ## [191] &quot;gene_191&quot; &quot;gene_192&quot; &quot;gene_193&quot; &quot;gene_194&quot; &quot;gene_195&quot; &quot;gene_196&quot; &quot;gene_197&quot; &quot;gene_198&quot; &quot;gene_199&quot; &quot;gene_200&quot; ## ## [[2]] ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; ## Nombres de tablas de cuentas que tenemos (RPKM, CPM, counts, logcounts, etc) assayNames(rse) ## [1] &quot;counts&quot; ## El inicio de nuestra tabla de cuentas head(assay(rse)) ## A B C D E F ## gene_1 2577.960 8526.615 2226.3070 3615.8967 1723.8851 3267.954 ## gene_2 7793.183 3462.579 478.2716 7688.3839 295.2813 2698.921 ## gene_3 9571.769 5280.564 9772.1671 9916.0076 2621.2085 6880.067 ## gene_4 4641.969 2784.091 6670.6757 258.5218 2771.8970 8737.586 ## gene_5 6436.758 7053.276 9978.8199 3588.1194 1447.9821 7290.890 ## gene_6 6845.704 1502.045 4383.5686 9750.8286 3529.3153 2192.060 ## Información de los genes en un objeto de Bioconductor rowRanges(rse) ## GRanges object with 200 ranges and 1 metadata column: ## seqnames ranges strand | feature_id ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;character&gt; ## gene_1 chr1 286235-286334 + | ID001 ## gene_2 chr1 586770-586869 - | ID002 ## gene_3 chr1 577897-577996 + | ID003 ## gene_4 chr1 494350-494449 + | ID004 ## gene_5 chr1 686692-686791 - | ID005 ## ... ... ... ... . ... ## gene_196 chr2 804998-805097 - | ID196 ## gene_197 chr2 177462-177561 - | ID197 ## gene_198 chr2 649993-650092 - | ID198 ## gene_199 chr2 275940-276039 - | ID199 ## gene_200 chr2 487418-487517 + | ID200 ## ------- ## seqinfo: 2 sequences from an unspecified genome; no seqlengths ## Tabla con información de los genes rowData(rse) # es idéntico a &#39;mcols(rowRanges(rse))&#39; ## DataFrame with 200 rows and 1 column ## feature_id ## &lt;character&gt; ## gene_1 ID001 ## gene_2 ID002 ## gene_3 ID003 ## gene_4 ID004 ## gene_5 ID005 ## ... ... ## gene_196 ID196 ## gene_197 ID197 ## gene_198 ID198 ## gene_199 ID199 ## gene_200 ID200 ## Tabla con información de las muestras colData(rse) ## DataFrame with 6 rows and 1 column ## Treatment ## &lt;character&gt; ## A ChIP ## B Input ## C ChIP ## D Input ## E ChIP ## F Input 3.2 Ejercicio Explica que sucede en las siguientes líneas de código de R. ## Comando 1 rse[1:2, ] ## class: RangedSummarizedExperiment ## dim: 2 6 ## metadata(0): ## assays(1): counts ## rownames(2): gene_1 gene_2 ## rowData names(1): feature_id ## colnames(6): A B ... E F ## colData names(1): Treatment ## Comando 2 rse[, c(&quot;A&quot;, &quot;D&quot;, &quot;F&quot;)] ## class: RangedSummarizedExperiment ## dim: 200 3 ## metadata(0): ## assays(1): counts ## rownames(200): gene_1 gene_2 ... gene_199 gene_200 ## rowData names(1): feature_id ## colnames(3): A D F ## colData names(1): Treatment 3.3 iSEE http://bioconductor.org/packages/iSEE http://bioconductor.org/packages/release/bioc/vignettes/iSEE/inst/doc/basic.html ## Explora el objeto rse de forma interactiva library(&quot;iSEE&quot;) iSEE::iSEE(rse) 3.4 Ejercicio con spatialLIBD Vamos a descargar datos de un objeto SingleCellExperiment que es similar a uno de SummarizedExperiment. http://bioconductor.org/packages/SingleCellExperiment http://bioconductor.org/packages/spatialLIBD https://doi.org/10.1038/s41593-020-00787-0 https://osca.bioconductor.org/ https://www.nature.com/articles/s41592-019-0654-x Figuras 2 y 3 ## Descarguemos unos datos de spatialLIBD sce_layer &lt;- spatialLIBD::fetch_data(&quot;sce_layer&quot;) ## adding rname &#39;https://www.dropbox.com/s/bg8xwysh2vnjwvg/Human_DLPFC_Visium_processedData_sce_scran_sce_layer_spatialLIBD.Rdata?dl=1&#39; ## 2025-01-24 21:00:08.691354 loading file /github/home/.cache/R/BiocFileCache/5747915a738_Human_DLPFC_Visium_processedData_sce_scran_sce_layer_spatialLIBD.Rdata%3Fdl%3D1 sce_layer ## class: SingleCellExperiment ## dim: 22331 76 ## metadata(0): ## assays(2): counts logcounts ## rownames(22331): ENSG00000243485 ENSG00000238009 ... ENSG00000278384 ENSG00000271254 ## rowData names(10): source type ... is_top_hvg is_top_hvg_sce_layer ## colnames(76): 151507_Layer1 151507_Layer2 ... 151676_Layer6 151676_WM ## colData names(13): sample_name layer_guess ... layer_guess_reordered_short spatialLIBD ## reducedDimNames(6): PCA TSNE_perplexity5 ... UMAP_neighbors15 PCAsub ## mainExpName: NULL ## altExpNames(0): ## Revisemos el tamaño de este objeto lobstr::obj_size(sce_layer) ## 33.99 MB Al igual que nuestro objeto rse podemos usar iSEE::iSEE() para explorar los datos. iSEE::iSEE(sce_layer) Descarga un PDF que reproduzca la imagen del lado derecho de la siguiente diapositiva. Incluye ese PDF en tu repositorio de notas del curso. Explora en con un heatmap la expresión de los genes MOBP, MBP y PCP4. Si hacemos un clustering (agrupamos los genes), ¿cúales genes se parecen más? ¿En qué capas se expresan más los genes MOBP y MBP? ENSG00000168314 # MOBP ENSG00000183036 # PCP4 ENSG00000197971 # MBP 3.5 Comunidad Autores de iSEE: Kévin Rue-Albrecht https://bsky.app/profile/kevinrue.bsky.social Federico Marini https://bsky.app/profile/federicomarini.bsky.social Charlotte Soneson https://bsky.app/profile/csoneson.bsky.social Aaron Lun https://twitter.com/realAaronLun Otro ejemplo de exploración de datos usando SummarizedExperiment y iSEE: Today we explored RNA-seq data from @StefanoBerto83 et al who made it easy to re-use. Thank you! ^^@lcolladotor used #shiny + #ggpubr as well as #iSEE📔 https://t.co/iUQHE0xqRc🗞️ https://t.co/qhAdXbhY9c#rstats @Bioconductorhttps://t.co/OXTukByhoo — LIBD rstats club (@LIBDrstats) February 12, 2021 "],["datos-de-rna-seq-a-través-de-recount3.html", "4 Datos de RNA-seq a través de recount3 4.1 Procesar datos crudos (FASTQ) con SPEAQeasy 4.2 Proyectos recount 4.3 Usar recount3 4.4 Ejercicio 4.5 Comunidad", " 4 Datos de RNA-seq a través de recount3 4.1 Procesar datos crudos (FASTQ) con SPEAQeasy Artículo de mayo 2021 https://doi.org/10.1186/s12859-021-04142-3 Pre-print de diciembre 2020 https://www.biorxiv.org/content/10.1101/2020.12.11.386789v1 Documentación del software http://research.libd.org/SPEAQeasy/ Ejemplo de como usar el software y analizar los datos http://research.libd.org/SPEAQeasy-example/ Taller de 3 días (aprox 6 horas en total) sobre expresión diferencial usando estos datos https://lcolladotor.github.io/bioc_team_ds/differential-expression-analysis.html 4.2 Proyectos recount ReCount: datos de unos 20 estudios http://bowtie-bio.sourceforge.net/recount/index.shtml Artículo del 2011 https://doi.org/10.1186/1471-2105-12-449 recount: 70 mil muestras de RNA-seq uniformemente procesadas https://jhubiostatistics.shinyapps.io/recount/ Documentación con pkgdown: http://leekgroup.github.io/recount/ Documentación en Bioconductor: http://bioconductor.org/packages/recount Artículo principal de 2017 https://doi.org/10.1038/nbt.3838 Artículo que explica porque las cuentas (counts) son diferentes a las usuales https://doi.org/10.12688/f1000research.12223.1 Algunos análisis ejemplo que hicimos http://leekgroup.github.io/recount-analyses/ recount3: 700 mil muestras de RNA-seq de humano y ratón http://rna.recount.bio/ Documentación con pkgdown: http://research.libd.org/recount3/ Documentación en Bioconductor: http://bioconductor.org/packages/recount3 Artículo: noviembre 2021 https://doi.org/10.1186/s13059-021-02533-6 Pre-print: mayo 2021 https://doi.org/10.1101/2021.05.21.445138 Ayuda a que todxs podamos analizar los datos sin importar quien tiene acceso a high performance computing (HPC) (clústers para procesar datos). Es como democratizar el acceso a los datos ^^ 4.3 Usar recount3 Check the original documentation in English here and here. Primero cargamos el paquete de R que automáticamente carga todas las dependencias incluyendo a SummarizedExperiment. ## Load recount3 R package library(&quot;recount3&quot;) Después tenemos que identificar un estudio de interes y determinar si queremos accesar la información a nivel de genes, exones, etc. Sabiendo el estudio de interes, podemos descargar los datos usando la función create_rse() como mostramos a continuación. create_rse() tiene argumentos con los cuales podemos especificar la anotación que queremos usar (las opciones dependen del organismo). ## Revisemos todos los proyectos con datos de humano en recount3 human_projects &lt;- available_projects() ## 2025-01-24 21:00:10.543241 caching file sra.recount_project.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/sra.recount_project.MD.gz&#39; ## 2025-01-24 21:00:11.621671 caching file gtex.recount_project.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/gtex/metadata/gtex.recount_project.MD.gz&#39; ## 2025-01-24 21:00:12.625217 caching file tcga.recount_project.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/tcga/metadata/tcga.recount_project.MD.gz&#39; ## Encuentra tu proyecto de interés. Aquí usaremos ## SRP009615 de ejemplo proj_info &lt;- subset( human_projects, project == &quot;SRP009615&quot; &amp; project_type == &quot;data_sources&quot; ) ## Crea un objeto de tipo RangedSummarizedExperiment (RSE) ## con la información a nivel de genes rse_gene_SRP009615 &lt;- create_rse(proj_info) ## 2025-01-24 21:00:17.743226 downloading and reading the metadata. ## 2025-01-24 21:00:18.106291 caching file sra.sra.SRP009615.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.sra.SRP009615.MD.gz&#39; ## 2025-01-24 21:00:19.316685 caching file sra.recount_project.SRP009615.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_project.SRP009615.MD.gz&#39; ## 2025-01-24 21:00:20.517769 caching file sra.recount_qc.SRP009615.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_qc.SRP009615.MD.gz&#39; ## 2025-01-24 21:00:21.77381 caching file sra.recount_seq_qc.SRP009615.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_seq_qc.SRP009615.MD.gz&#39; ## 2025-01-24 21:00:22.844327 caching file sra.recount_pred.SRP009615.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/15/SRP009615/sra.recount_pred.SRP009615.MD.gz&#39; ## 2025-01-24 21:00:23.538472 downloading and reading the feature information. ## 2025-01-24 21:00:23.847855 caching file human.gene_sums.G026.gtf.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/annotations/gene_sums/human.gene_sums.G026.gtf.gz&#39; ## 2025-01-24 21:00:25.147382 downloading and reading the counts: 12 samples across 63856 features. ## 2025-01-24 21:00:25.460221 caching file sra.gene_sums.SRP009615.G026.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/gene_sums/15/SRP009615/sra.gene_sums.SRP009615.G026.gz&#39; ## 2025-01-24 21:00:26.463614 constructing the RangedSummarizedExperiment (rse) object. ## Explora el objeto RSE rse_gene_SRP009615 ## class: RangedSummarizedExperiment ## dim: 63856 12 ## metadata(8): time_created recount3_version ... annotation recount3_url ## assays(1): raw_counts ## rownames(63856): ENSG00000278704.1 ENSG00000277400.1 ... ENSG00000182484.15_PAR_Y ENSG00000227159.8_PAR_Y ## rowData names(10): source type ... havana_gene tag ## colnames(12): SRR387777 SRR387778 ... SRR389077 SRR389078 ## colData names(175): rail_id external_id ... recount_pred.curated.cell_line BigWigURL De forma interactiva también podemos escoger nuestro estudio de interés usando el siguiente código o vía el explorar de estudios que creamos. ## Explora los proyectos disponibles de forma interactiva proj_info_interactive &lt;- interactiveDisplayBase::display(human_projects) ## Selecciona un solo renglón en la tabla y da click en &quot;send&quot;. ## Aquí verificamos que solo seleccionaste un solo renglón. stopifnot(nrow(proj_info_interactive) == 1) ## Crea el objeto RSE rse_gene_interactive &lt;- create_rse(proj_info_interactive) Una vez que tenemos las cuentas, podemos usar transform_counts() o compute_read_counts() para convertir en los formatos esperados por otras herramientas. Revisen el artículo de 2017 del recountWorkflow para más detalles. ## Convirtamos las cuentas por nucleotido a cuentas por lectura ## usando compute_read_counts(). ## Para otras transformaciones como RPKM y TPM, revisa transform_counts(). assay(rse_gene_SRP009615, &quot;counts&quot;) &lt;- compute_read_counts(rse_gene_SRP009615) ## Para este estudio en específico, hagamos más fácil de usar la ## información del experimento rse_gene_SRP009615 &lt;- expand_sra_attributes(rse_gene_SRP009615) colData(rse_gene_SRP009615)[ , grepl(&quot;^sra_attribute&quot;, colnames(colData(rse_gene_SRP009615))) ] ## DataFrame with 12 rows and 4 columns ## sra_attribute.cells sra_attribute.shRNA_expression sra_attribute.source_name sra_attribute.treatment ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## SRR387777 K562 no SL2933 Puromycin ## SRR387778 K562 yes, targeting SRF SL2934 Puromycin, doxycycline ## SRR387779 K562 no SL5265 Puromycin ## SRR387780 K562 yes targeting SRF SL3141 Puromycin, doxycycline ## SRR389079 K562 no shRNA expression SL6485 Puromycin ## ... ... ... ... ... ## SRR389082 K562 expressing shRNA tar.. SL2592 Puromycin, doxycycline ## SRR389083 K562 no shRNA expression SL4337 Puromycin ## SRR389084 K562 expressing shRNA tar.. SL4326 Puromycin, doxycycline ## SRR389077 K562 no shRNA expression SL1584 Puromycin ## SRR389078 K562 expressing shRNA tar.. SL1583 Puromycin, doxycycline Ahora estamos listos para usar otras herramientas para el análisis de los datos. 4.4 Ejercicio Utiliza iSEE para reproducir la siguiente imagen Pistas: Utiliza el dynamic feature selection Utiliza información de las columnas para el eje X Utiliza información de las columnas para los colores (opcional) Crea tu cuenta gratis de https://www.shinyapps.io/ y comparte tu visualización de los datos usando iSEE de esa forma. OJO: Necesitaras una cuenta pagada para poder tener acceso a computadoras con suficiente memoria para los datos que tenemos. O usa un set de datos más pequeño. Ejemplos reales: https://github.com/LieberInstitute/10xPilot_snRNAseq-human#explore-the-data-interactively. Ejemplo: https://libd.shinyapps.io/SRP009615/ creado con https://github.com/lcolladotor/rnaseq_2023_notas_en_vivo/blob/main/app.R. 4.5 Comunidad Autores de recount2 y 3 en Twitter: https://twitter.com/chrisnwilks https://bsky.app/profile/benlangmead.bsky.social https://bsky.app/profile/kasperdhansen.bsky.social https://bsky.app/profile/nav.bsky.social https://twitter.com/Shannon_E_Ellis https://bsky.app/profile/jtleek.bsky.social Ejemplos de tweets de la comunidad Un tweet de un alumno del 2021: @lcolladotor Earlier I was looking for some data to analyze in recount, they have so much, I seriously can't decide what to use! https://t.co/fIJwXq46TzThanks for such an useful package!@chrisnwilks @BenLangmead @KasperDHansen @AbhiNellore @Shannon_E_Ellis @jtleek — Axel Zagal Norman (@NormanZagal) February 25, 2021 Explorando la posibilidad de hacer análisis con recount3 (enero 2022): I have found a novel exon expressed in a cancer sample. I would like to search TCGA/SRA to identify other samples with the same/similar exon. It will be rare. Can I use Recount3, megadepth for this? @jtleek @lcolladotor @BenLangmead — Alicia Oshlack (@AliciaOshlack) January 5, 2022 Un tweet del curso de 2022: Thinking on this a bit it is strange how few people are doing “medium-sized” meta analyses of transcriptiomics. One on end you have @BenLangmead @lcolladotor reprocessing (with a touch of analysis) most of SRA. And you see papers pulling an dataset or two to corroborate. — David McGaughey (@David_McGaughey) February 1, 2022 "],["modelos-estadísticos.html", "5 Modelos estadísticos 5.1 ExploreModelMatrix 5.2 Datos de SRP045638 5.3 Normalización de datos 5.4 Expresión diferencial 5.5 Visualizando genes DE 5.6 Ejercicio 5.7 Comunidad 5.8 Ejercicio: respuesta 5.9 Sobre centering y scaling en heatmaps 5.10 Específicaciones del proyecto", " 5 Modelos estadísticos Revisión de regresión lineal https://lcolladotor.github.io/bioc_team_ds/helping-others.html#linear-regression-example Con R, usamos mucho la función model.matrix() y la sintáxis de fórmula Y ~ X1 + X2 tal como en el siguiente ejemplo. ## ?model.matrix mat &lt;- with(trees, model.matrix(log(Volume) ~ log(Height) + log(Girth))) mat ## (Intercept) log(Height) log(Girth) ## 1 1 4.248495 2.116256 ## 2 1 4.174387 2.151762 ## 3 1 4.143135 2.174752 ## 4 1 4.276666 2.351375 ## 5 1 4.394449 2.370244 ## 6 1 4.418841 2.379546 ## 7 1 4.189655 2.397895 ## 8 1 4.317488 2.397895 ## 9 1 4.382027 2.406945 ## 10 1 4.317488 2.415914 ## 11 1 4.369448 2.424803 ## 12 1 4.330733 2.433613 ## 13 1 4.330733 2.433613 ## 14 1 4.234107 2.459589 ## 15 1 4.317488 2.484907 ## 16 1 4.304065 2.557227 ## 17 1 4.442651 2.557227 ## 18 1 4.454347 2.587764 ## 19 1 4.262680 2.617396 ## 20 1 4.158883 2.624669 ## 21 1 4.356709 2.639057 ## 22 1 4.382027 2.653242 ## 23 1 4.304065 2.674149 ## 24 1 4.276666 2.772589 ## 25 1 4.343805 2.791165 ## 26 1 4.394449 2.850707 ## 27 1 4.406719 2.862201 ## 28 1 4.382027 2.884801 ## 29 1 4.382027 2.890372 ## 30 1 4.382027 2.890372 ## 31 1 4.465908 3.025291 ## attr(,&quot;assign&quot;) ## [1] 0 1 2 colnames(mat) ## [1] &quot;(Intercept)&quot; &quot;log(Height)&quot; &quot;log(Girth)&quot; ¿Cómo interpretamos los nombres de las columnas de mat? summary(lm(log(Volume) ~ log(Height) + log(Girth), data = trees)) ## ## Call: ## lm(formula = log(Volume) ~ log(Height) + log(Girth), data = trees) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.168561 -0.048488 0.002431 0.063637 0.129223 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -6.63162 0.79979 -8.292 5.06e-09 *** ## log(Height) 1.11712 0.20444 5.464 7.81e-06 *** ## log(Girth) 1.98265 0.07501 26.432 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.08139 on 28 degrees of freedom ## Multiple R-squared: 0.9777, Adjusted R-squared: 0.9761 ## F-statistic: 613.2 on 2 and 28 DF, p-value: &lt; 2.2e-16 5.1 ExploreModelMatrix Es un paquete de Bioconductor que nos ayuda a entender los modelos estadísticos que estamos usando gracias a visualizaciones http://www.bioconductor.org/packages/ExploreModelMatrix/ que está descrito en el siguiente artículo Revisaremos los ejemplos en http://www.bioconductor.org/packages/release/bioc/vignettes/ExploreModelMatrix/inst/doc/ExploreModelMatrix.html 5.1.1 Ejemplo 1 ## Datos de ejemplo (sampleData &lt;- data.frame( genotype = rep(c(&quot;A&quot;, &quot;B&quot;), each = 4), treatment = rep(c(&quot;ctrl&quot;, &quot;trt&quot;), 4) )) ## genotype treatment ## 1 A ctrl ## 2 A trt ## 3 A ctrl ## 4 A trt ## 5 B ctrl ## 6 B trt ## 7 B ctrl ## 8 B trt ## Creemos las imágenes usando ExploreModelMatrix vd &lt;- ExploreModelMatrix::VisualizeDesign( sampleData = sampleData, designFormula = ~ genotype + treatment, textSizeFitted = 4 ) ## Veamos las imágenes cowplot::plot_grid(plotlist = vd$plotlist) De forma interactiva podemos correr el siguiente código: ## Usaremos shiny otra ves app &lt;- ExploreModelMatrix( sampleData = sampleData, designFormula = ~ genotype + treatment ) if (interactive()) shiny::runApp(app) 5.1.2 Ejemplo 2 http://bioconductor.org/packages/release/bioc/vignettes/ExploreModelMatrix/inst/doc/ExploreModelMatrix.html#example-2 5.1.3 Ejemplo 3 http://bioconductor.org/packages/release/bioc/vignettes/ExploreModelMatrix/inst/doc/ExploreModelMatrix.html#example-3 5.1.4 Ejercicio Interpreta ResponseResistant.Treatmentpre del ejercicio 2. Puede ser útil tomar un screenshot (captura de pantalla) y anotarla con líneas de colores. Si haces eso, puedes incluir la imagen en tus notas. ¿Por qué es clave el 0 al inicio de la fórmula en el ejercicio 3? 5.1.5 Para aprender más A guide to creating design matrices for gene expression experiments: http://bioconductor.org/packages/release/workflows/vignettes/RNAseq123/inst/doc/designmatrices.html Artículo relacionado: https://doi.org/10.12688/f1000research.27893.1 “Model matrix not full rank” http://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#model-matrix-not-full-rank 5.2 Datos de SRP045638 Vamos a usar datos de https://www.ncbi.nlm.nih.gov/sra/?term=SRP045638 procesados con recount3. Primero hay que descargar los datos con los comandos que vimos ayer. library(&quot;recount3&quot;) human_projects &lt;- available_projects() ## 2025-01-24 21:00:27.336987 caching file sra.recount_project.MD.gz. ## 2025-01-24 21:00:27.619087 caching file gtex.recount_project.MD.gz. ## 2025-01-24 21:00:27.955065 caching file tcga.recount_project.MD.gz. rse_gene_SRP045638 &lt;- create_rse( subset( human_projects, project == &quot;SRP045638&quot; &amp; project_type == &quot;data_sources&quot; ) ) ## 2025-01-24 21:00:30.010621 downloading and reading the metadata. ## 2025-01-24 21:00:30.331889 caching file sra.sra.SRP045638.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/38/SRP045638/sra.sra.SRP045638.MD.gz&#39; ## 2025-01-24 21:00:31.262718 caching file sra.recount_project.SRP045638.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/38/SRP045638/sra.recount_project.SRP045638.MD.gz&#39; ## 2025-01-24 21:00:32.259662 caching file sra.recount_qc.SRP045638.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/38/SRP045638/sra.recount_qc.SRP045638.MD.gz&#39; ## 2025-01-24 21:00:33.276013 caching file sra.recount_seq_qc.SRP045638.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/38/SRP045638/sra.recount_seq_qc.SRP045638.MD.gz&#39; ## 2025-01-24 21:00:34.182613 caching file sra.recount_pred.SRP045638.MD.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/metadata/38/SRP045638/sra.recount_pred.SRP045638.MD.gz&#39; ## 2025-01-24 21:00:34.925513 downloading and reading the feature information. ## 2025-01-24 21:00:35.224848 caching file human.gene_sums.G026.gtf.gz. ## 2025-01-24 21:00:35.604415 downloading and reading the counts: 66 samples across 63856 features. ## 2025-01-24 21:00:35.915582 caching file sra.gene_sums.SRP045638.G026.gz. ## adding rname &#39;http://duffel.rail.bio/recount3/human/data_sources/sra/gene_sums/38/SRP045638/sra.gene_sums.SRP045638.G026.gz&#39; ## 2025-01-24 21:00:37.075537 constructing the RangedSummarizedExperiment (rse) object. assay(rse_gene_SRP045638, &quot;counts&quot;) &lt;- compute_read_counts(rse_gene_SRP045638) Una vez descargados y con los números de lecturas podemos usar expand_sra_attributes(). Sin embargo, tenemos un problema con estos datos. rse_gene_SRP045638$sra.sample_attributes[1:3] ## [1] &quot;age;;67.78|biomaterial_provider;;LIBD|BioSampleModel;;Human|dev_stage;;Fetal|disease;;Control|Fraction;;total|isolate;;DLPFC|race;;AA|RIN;;8.3|sex;;female|tissue;;DLPFC&quot; ## [2] &quot;age;;40.42|biomaterial_provider;;LIBD|BioSampleModel;;Human|disease;;Control|Fraction;;total|isolate;;DLPFC|race;;AA|RIN;;8.4|sex;;male|tissue;;DLPFC&quot; ## [3] &quot;age;;41.58|biomaterial_provider;;LIBD|BioSampleModel;;Human|disease;;control|Fraction;;total|isolate;;R2869|race;;AA|RIN;;8.7|sex;;male|tissue;;DLPFC&quot; Vamos a intentar resolverlo eliminando información que está presente solo en ciertas muestras. rse_gene_SRP045638$sra.sample_attributes &lt;- gsub(&quot;dev_stage;;Fetal\\\\|&quot;, &quot;&quot;, rse_gene_SRP045638$sra.sample_attributes) rse_gene_SRP045638$sra.sample_attributes[1:3] ## [1] &quot;age;;67.78|biomaterial_provider;;LIBD|BioSampleModel;;Human|disease;;Control|Fraction;;total|isolate;;DLPFC|race;;AA|RIN;;8.3|sex;;female|tissue;;DLPFC&quot; ## [2] &quot;age;;40.42|biomaterial_provider;;LIBD|BioSampleModel;;Human|disease;;Control|Fraction;;total|isolate;;DLPFC|race;;AA|RIN;;8.4|sex;;male|tissue;;DLPFC&quot; ## [3] &quot;age;;41.58|biomaterial_provider;;LIBD|BioSampleModel;;Human|disease;;control|Fraction;;total|isolate;;R2869|race;;AA|RIN;;8.7|sex;;male|tissue;;DLPFC&quot; Ahora si podemos continuar con el mismo código de ayer. rse_gene_SRP045638 &lt;- expand_sra_attributes(rse_gene_SRP045638) colData(rse_gene_SRP045638)[ , grepl(&quot;^sra_attribute&quot;, colnames(colData(rse_gene_SRP045638))) ] ## DataFrame with 66 rows and 10 columns ## sra_attribute.age sra_attribute.biomaterial_provider sra_attribute.BioSampleModel sra_attribute.disease ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## SRR2071341 67.78 LIBD Human Control ## SRR2071345 40.42 LIBD Human Control ## SRR2071346 41.58 LIBD Human control ## SRR2071347 44.17 LIBD Human control ## SRR2071348 -0.3836 LIBD Human control ## ... ... ... ... ... ## SRR2071366 66.72 LIBD Human control ## SRR2071372 43.88 LIBD Human control ## SRR2071373 15.17 LIBD Human control ## SRR2071374 70.95 LIBD Human control ## SRR2071375 4.14 LIBD Human control ## sra_attribute.Fraction sra_attribute.isolate sra_attribute.race sra_attribute.RIN sra_attribute.sex ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## SRR2071341 total DLPFC AA 8.3 female ## SRR2071345 total DLPFC AA 8.4 male ## SRR2071346 total R2869 AA 8.7 male ## SRR2071347 total R3098 AA 5.3 female ## SRR2071348 total R3452 AA 9.6 female ## ... ... ... ... ... ... ## SRR2071366 total R3763 CAUC 7 female ## SRR2071372 total R4166 AA 8.7 male ## SRR2071373 total R4196 CAUC 7.9 female ## SRR2071374 total R4338 AS 8.3 male ## SRR2071375 total R4699 CAUC 8.7 male ## sra_attribute.tissue ## &lt;character&gt; ## SRR2071341 DLPFC ## SRR2071345 DLPFC ## SRR2071346 DLPFC ## SRR2071347 DLPFC ## SRR2071348 DLPFC ## ... ... ## SRR2071366 DLPFC ## SRR2071372 DLPFC ## SRR2071373 DLPFC ## SRR2071374 DLPFC ## SRR2071375 DLPFC Como ahora si vamos a usar esta información para un modelo estadístico, será importante que tengamos en el formato correcto de R a la información que vamos a usar. ## Pasar de character a numeric o factor rse_gene_SRP045638$sra_attribute.age &lt;- as.numeric(rse_gene_SRP045638$sra_attribute.age) rse_gene_SRP045638$sra_attribute.disease &lt;- factor(tolower(rse_gene_SRP045638$sra_attribute.disease)) rse_gene_SRP045638$sra_attribute.RIN &lt;- as.numeric(rse_gene_SRP045638$sra_attribute.RIN) rse_gene_SRP045638$sra_attribute.sex &lt;- factor(rse_gene_SRP045638$sra_attribute.sex) ## Resumen de las variables de interés summary(as.data.frame(colData(rse_gene_SRP045638)[ , grepl(&quot;^sra_attribute.[age|disease|RIN|sex]&quot;, colnames(colData(rse_gene_SRP045638))) ])) ## sra_attribute.age sra_attribute.disease sra_attribute.isolate sra_attribute.RIN sra_attribute.sex ## Min. :-0.4986 control:66 Length:66 Min. :5.30 female:22 ## 1st Qu.: 0.3424 Class :character 1st Qu.:8.00 male :44 ## Median :14.9000 Mode :character Median :8.30 ## Mean :22.6286 Mean :8.15 ## 3rd Qu.:41.2900 3rd Qu.:8.70 ## Max. :73.9100 Max. :9.60 Ahora crearemos un par de variables para que las podamos usar en nuestro análisis. ## Encontraremos diferencias entre muestra prenatalas vs postnatales rse_gene_SRP045638$prenatal &lt;- factor(ifelse(rse_gene_SRP045638$sra_attribute.age &lt; 0, &quot;prenatal&quot;, &quot;postnatal&quot;)) table(rse_gene_SRP045638$prenatal) ## ## postnatal prenatal ## 56 10 ## http://rna.recount.bio/docs/quality-check-fields.html rse_gene_SRP045638$assigned_gene_prop &lt;- rse_gene_SRP045638$recount_qc.gene_fc_count_all.assigned / rse_gene_SRP045638$recount_qc.gene_fc_count_all.total summary(rse_gene_SRP045638$assigned_gene_prop) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.1942 0.7004 0.7591 0.7170 0.7991 0.8493 with(colData(rse_gene_SRP045638), plot(assigned_gene_prop, sra_attribute.RIN)) ## Hm... veamos si hay una diferencia entre los grupos with(colData(rse_gene_SRP045638), tapply(assigned_gene_prop, prenatal, summary)) ## $postnatal ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.1942 0.7072 0.7719 0.7179 0.8017 0.8493 ## ## $prenatal ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.6856 0.7004 0.7088 0.7116 0.7259 0.7347 A continuación podemos eliminar algunas muestras que consideremos de baja calidad y genes con niveles de expresión muy bajos. ## Guardemos nuestro objeto entero por si luego cambiamos de opinión rse_gene_SRP045638_unfiltered &lt;- rse_gene_SRP045638 ## Eliminemos a muestras malas hist(rse_gene_SRP045638$assigned_gene_prop) table(rse_gene_SRP045638$assigned_gene_prop &lt; 0.3) ## ## FALSE TRUE ## 65 1 rse_gene_SRP045638 &lt;- rse_gene_SRP045638[, rse_gene_SRP045638$assigned_gene_prop &gt; 0.3] ## Calculemos los niveles medios de expresión de los genes en nuestras ## muestras. ## Ojo: en un análisis real probablemente haríamos esto con los RPKMs o CPMs ## en vez de las cuentas. ## En realidad usariamos: # edgeR::filterByExpr() https://bioconductor.org/packages/edgeR/ https://rdrr.io/bioc/edgeR/man/filterByExpr.html # genefilter::genefilter() https://bioconductor.org/packages/genefilter/ https://rdrr.io/bioc/genefilter/man/genefilter.html # jaffelab::expression_cutoff() http://research.libd.org/jaffelab/reference/expression_cutoff.html # gene_means &lt;- rowMeans(assay(rse_gene_SRP045638, &quot;counts&quot;)) summary(gene_means) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0 0.1 2.5 815.2 170.2 1362047.9 ## Eliminamos genes rse_gene_SRP045638 &lt;- rse_gene_SRP045638[gene_means &gt; 0.1, ] ## Dimensiones finales dim(rse_gene_SRP045638) ## [1] 46929 65 ## Porcentaje de genes que retuvimos round(nrow(rse_gene_SRP045638) / nrow(rse_gene_SRP045638_unfiltered) * 100, 2) ## [1] 73.49 Ahora ya estamos listos para continuar con el análisis de expresión diferencial, bueno, casi. 5.3 Normalización de datos Lean A hypothetical scenario en uno de los artículos sobre edgeR https://genomebiology.biomedcentral.com/articles/10.1186/gb-2010-11-3-r25#Sec2 para entender un poco sobre el concepto de composition bias. Sigue siendo relevante con datos de scRNA-seq como pueden ver en https://bioconductor.org/books/3.20/OSCA.multisample/multi-sample-comparisons.html#performing-the-de-analysi. Ahí descubren una serie de pasos para usar métodos desarrollados para bulk RNA-seq y como se pueden usar en scRNA-seq. library(&quot;edgeR&quot;) # BiocManager::install(&quot;edgeR&quot;, update = FALSE) dge &lt;- DGEList( counts = assay(rse_gene_SRP045638, &quot;counts&quot;), genes = rowData(rse_gene_SRP045638) ) dge &lt;- calcNormFactors(dge) 5.4 Expresión diferencial Primero que nada, definamos nuestro modelo estadístico. Típicamente, exploraríamos más los datos para revisar que no haya otros problemas con las muestras y para explorar la relación entre nuestras variables. library(&quot;ggplot2&quot;) ggplot(as.data.frame(colData(rse_gene_SRP045638)), aes(y = assigned_gene_prop, x = prenatal)) + geom_boxplot() + theme_bw(base_size = 20) + ylab(&quot;Assigned Gene Prop&quot;) + xlab(&quot;Age Group&quot;) Por ejemplo, usando el paquete de variancePartition y scater entre otros tal como exploramos en el siguiente video del club de R de LIBD (notes in English)/ Por ahora continuaremos con el siguiente modelo estadístico. mod &lt;- model.matrix(~ prenatal + sra_attribute.RIN + sra_attribute.sex + assigned_gene_prop, data = colData(rse_gene_SRP045638) ) colnames(mod) ## [1] &quot;(Intercept)&quot; &quot;prenatalprenatal&quot; &quot;sra_attribute.RIN&quot; &quot;sra_attribute.sexmale&quot; ## [5] &quot;assigned_gene_prop&quot; Ya teniendo el modelo estadístico, podemos usar limma para realizar el análisis de expresión diferencial como tal. library(&quot;limma&quot;) vGene &lt;- voom(dge, mod, plot = TRUE) eb_results &lt;- eBayes(lmFit(vGene)) de_results &lt;- topTable( eb_results, coef = 2, number = nrow(rse_gene_SRP045638), sort.by = &quot;none&quot; ) dim(de_results) ## [1] 46929 16 head(de_results) ## source type bp_length phase gene_id gene_type gene_name level ## ENSG00000223972.5 HAVANA gene 1735 NA ENSG00000223972.5 transcribed_unprocessed_pseudogene DDX11L1 2 ## ENSG00000278267.1 ENSEMBL gene 68 NA ENSG00000278267.1 miRNA MIR6859-1 3 ## ENSG00000227232.5 HAVANA gene 1351 NA ENSG00000227232.5 unprocessed_pseudogene WASH7P 2 ## ENSG00000284332.1 ENSEMBL gene 138 NA ENSG00000284332.1 miRNA MIR1302-2 3 ## ENSG00000243485.5 HAVANA gene 1021 NA ENSG00000243485.5 lincRNA MIR1302-2HG 2 ## ENSG00000237613.2 HAVANA gene 1219 NA ENSG00000237613.2 lincRNA FAM138A 2 ## havana_gene tag logFC AveExpr t P.Value adj.P.Val B ## ENSG00000223972.5 OTTHUMG00000000961.2 &lt;NA&gt; -0.4522185 -3.4441644 -1.637034 1.064080e-01 1.348462e-01 -5.5544843 ## ENSG00000278267.1 &lt;NA&gt; &lt;NA&gt; 1.1158860 -1.3116448 6.123756 5.743771e-08 2.105690e-07 7.7639118 ## ENSG00000227232.5 OTTHUMG00000000958.1 &lt;NA&gt; 0.6860298 3.6411313 5.644804 3.816951e-07 1.247133e-06 5.5007844 ## ENSG00000284332.1 &lt;NA&gt; &lt;NA&gt; 0.4559904 -5.7311063 1.438080 1.551609e-01 1.903075e-01 -5.7956155 ## ENSG00000243485.5 OTTHUMG00000000959.2 ncRNA_host 0.9640252 -0.6646248 5.072618 3.445542e-06 9.728406e-06 3.7022021 ## ENSG00000237613.2 OTTHUMG00000000960.1 &lt;NA&gt; -1.5460829 -5.3019159 -4.190983 8.476784e-05 1.828325e-04 0.9292571 ## Genes diferencialmente expresados entre pre y post natal con FDR &lt; 5% table(de_results$adj.P.Val &lt; 0.05) ## ## FALSE TRUE ## 12851 34078 ## Visualicemos los resultados estadísticos plotMA(eb_results, coef = 2) volcanoplot(eb_results, coef = 2, highlight = 3, names = de_results$gene_name) de_results[de_results$gene_name %in% c(&quot;ZSCAN2&quot;, &quot;VASH2&quot;, &quot;KIAA0922&quot;), ] ## source type bp_length phase gene_id gene_type gene_name level havana_gene ## ENSG00000143494.15 HAVANA gene 9086 NA ENSG00000143494.15 protein_coding VASH2 2 OTTHUMG00000036925.5 ## ENSG00000176371.13 HAVANA gene 4878 NA ENSG00000176371.13 protein_coding ZSCAN2 1 OTTHUMG00000074027.5 ## ENSG00000121210.15 HAVANA gene 6393 NA ENSG00000121210.15 protein_coding KIAA0922 2 OTTHUMG00000153244.5 ## tag logFC AveExpr t P.Value adj.P.Val B ## ENSG00000143494.15 &lt;NA&gt; 5.444271 1.876990 37.85216 2.561452e-46 6.010319e-42 95.10126 ## ENSG00000176371.13 &lt;NA&gt; 2.735639 2.751109 36.59344 2.137022e-45 3.342943e-41 92.99949 ## ENSG00000121210.15 &lt;NA&gt; 3.283050 2.945269 41.89725 4.235912e-49 1.987871e-44 101.31124 https://www.genecards.org/cgi-bin/carddisp.pl?gene=ZSCAN2 https://www.genecards.org/cgi-bin/carddisp.pl?gene=VASH2 https://www.genecards.org/cgi-bin/carddisp.pl?gene=KIAA0922 5.5 Visualizando genes DE De vGene$E podemos extraer los datos normalizados por limma-voom. Revisemos los top 50 genes diferencialmente expresados. ## Extraer valores de los genes de interés exprs_heatmap &lt;- vGene$E[rank(de_results$adj.P.Val) &lt;= 50, ] ## Creemos una tabla con información de las muestras ## y con nombres de columnas más amigables df &lt;- as.data.frame(colData(rse_gene_SRP045638)[, c(&quot;prenatal&quot;, &quot;sra_attribute.RIN&quot;, &quot;sra_attribute.sex&quot;)]) colnames(df) &lt;- c(&quot;AgeGroup&quot;, &quot;RIN&quot;, &quot;Sex&quot;) ## Hagamos un heatmap library(&quot;pheatmap&quot;) pheatmap( exprs_heatmap, cluster_rows = TRUE, cluster_cols = TRUE, show_rownames = FALSE, show_colnames = FALSE, annotation_col = df ) Los resultados que tenemos no son tan sorprendentes porque hay una diferencia enorme en los perfiles de expresión en el DLPFC entre muestra pre y post-natales. Eso lo podemos ver con MDS (multidimensional scaling) tal como describen en este workflow. ## Para colores library(&quot;RColorBrewer&quot;) ## Conviertiendo los grupos de edad a colores col.group &lt;- df$AgeGroup levels(col.group) &lt;- brewer.pal(nlevels(col.group), &quot;Set1&quot;) ## Warning in brewer.pal(nlevels(col.group), &quot;Set1&quot;): minimal value for n is 3, returning requested palette with 3 different levels col.group &lt;- as.character(col.group) ## MDS por grupos de edad plotMDS(vGene$E, labels = df$AgeGroup, col = col.group) ## Conviertiendo los valores de Sex a colores col.sex &lt;- df$Sex levels(col.sex) &lt;- brewer.pal(nlevels(col.sex), &quot;Dark2&quot;) ## Warning in brewer.pal(nlevels(col.sex), &quot;Dark2&quot;): minimal value for n is 3, returning requested palette with 3 different levels col.sex &lt;- as.character(col.sex) ## MDS por sexo plotMDS(vGene$E, labels = df$Sex, col = col.sex) 5.6 Ejercicio Agreguen los nombres de los genes a nuestro pheatmap. Pistas: Revisen la información de rowRanges(rse_gene_SRP045638) o de_results. Exploren que hace la función match(). 5.7 Comunidad Algunxs de lxs autores de ExploreModelMatrix: https://bsky.app/profile/csoneson.bsky.social https://bsky.app/profile/federicomarini.bsky.social https://bsky.app/profile/mikelove.bsky.social Algunxs de lxs autores de edgeR y limma: https://bsky.app/profile/mritchieau.bsky.social https://bsky.app/profile/davisjmcc.bsky.social https://bsky.app/profile/markrobinsonca.bsky.social https://bsky.app/profile/aliciao.bsky.social If you've ever been dazed by design matrices or confused by contrasts when performing gene expression analysis in limma, the new article by Charity Law is for you https://t.co/ZSMOA20tdm #bioconductor #rstats (1/2) — Matt Ritchie (@mritchieau) December 15, 2020 5.8 Ejercicio: respuesta ## Tenemos que usar gene_id y gene_name rowRanges(rse_gene_SRP045638) ## GRanges object with 46929 ranges and 10 metadata columns: ## seqnames ranges strand | source type bp_length phase gene_id ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;factor&gt; &lt;factor&gt; &lt;numeric&gt; &lt;integer&gt; &lt;character&gt; ## ENSG00000223972.5 chr1 11869-14409 + | HAVANA gene 1735 &lt;NA&gt; ENSG00000223972.5 ## ENSG00000278267.1 chr1 17369-17436 - | ENSEMBL gene 68 &lt;NA&gt; ENSG00000278267.1 ## ENSG00000227232.5 chr1 14404-29570 - | HAVANA gene 1351 &lt;NA&gt; ENSG00000227232.5 ## ENSG00000284332.1 chr1 30366-30503 + | ENSEMBL gene 138 &lt;NA&gt; ENSG00000284332.1 ## ENSG00000243485.5 chr1 29554-31109 + | HAVANA gene 1021 &lt;NA&gt; ENSG00000243485.5 ## ... ... ... ... . ... ... ... ... ... ## ENSG00000229238.3 chrY 26277923-26354418 - | HAVANA gene 1671 &lt;NA&gt; ENSG00000229238.3 ## ENSG00000224240.1 chrY 26549425-26549743 + | HAVANA gene 319 &lt;NA&gt; ENSG00000224240.1 ## ENSG00000215506.5 chrY 26508213-26579690 + | HAVANA gene 1605 &lt;NA&gt; ENSG00000215506.5 ## ENSG00000231514.1 chrY 26626520-26627159 - | HAVANA gene 640 &lt;NA&gt; ENSG00000231514.1 ## ENSG00000237917.1 chrY 26594851-26634652 - | HAVANA gene 2337 &lt;NA&gt; ENSG00000237917.1 ## gene_type gene_name level havana_gene tag ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## ENSG00000223972.5 transcribed_unproces.. DDX11L1 2 OTTHUMG00000000961.2 &lt;NA&gt; ## ENSG00000278267.1 miRNA MIR6859-1 3 &lt;NA&gt; &lt;NA&gt; ## ENSG00000227232.5 unprocessed_pseudogene WASH7P 2 OTTHUMG00000000958.1 &lt;NA&gt; ## ENSG00000284332.1 miRNA MIR1302-2 3 &lt;NA&gt; &lt;NA&gt; ## ENSG00000243485.5 lincRNA MIR1302-2HG 2 OTTHUMG00000000959.2 ncRNA_host ## ... ... ... ... ... ... ## ENSG00000229238.3 unprocessed_pseudogene PPP1R12BP1 2 OTTHUMG00000036764.2 &lt;NA&gt; ## ENSG00000224240.1 processed_pseudogene CYCSP49 1 OTTHUMG00000036760.1 overlapping_locus ## ENSG00000215506.5 unprocessed_pseudogene TPTE2P4 1 OTTHUMG00000036765.1 overlapping_locus ## ENSG00000231514.1 processed_pseudogene FAM58CP 1 OTTHUMG00000036813.1 overlapping_locus ## ENSG00000237917.1 unprocessed_pseudogene PARP4P1 1 OTTHUMG00000036812.1 overlapping_locus ## ------- ## seqinfo: 374 sequences from an unspecified genome; no seqlengths ## Alternativamente, podriamos haber usado de_results head(de_results, n = 3) ## source type bp_length phase gene_id gene_type gene_name level ## ENSG00000223972.5 HAVANA gene 1735 NA ENSG00000223972.5 transcribed_unprocessed_pseudogene DDX11L1 2 ## ENSG00000278267.1 ENSEMBL gene 68 NA ENSG00000278267.1 miRNA MIR6859-1 3 ## ENSG00000227232.5 HAVANA gene 1351 NA ENSG00000227232.5 unprocessed_pseudogene WASH7P 2 ## havana_gene tag logFC AveExpr t P.Value adj.P.Val B ## ENSG00000223972.5 OTTHUMG00000000961.2 &lt;NA&gt; -0.4522185 -3.444164 -1.637034 1.064080e-01 1.348462e-01 -5.554484 ## ENSG00000278267.1 &lt;NA&gt; &lt;NA&gt; 1.1158860 -1.311645 6.123756 5.743771e-08 2.105690e-07 7.763912 ## ENSG00000227232.5 OTTHUMG00000000958.1 &lt;NA&gt; 0.6860298 3.641131 5.644804 3.816951e-07 1.247133e-06 5.500784 ## Es la misma información identical(rowRanges(rse_gene_SRP045638)$gene_id, de_results$gene_id) ## [1] TRUE identical(rowRanges(rse_gene_SRP045638)$gene_name, de_results$gene_name) ## [1] TRUE ## Guardemos los IDs de nuestros 50 genes nombres_originales &lt;- rownames(exprs_heatmap) ## Con match() podemos encontrar cual es cual rownames(exprs_heatmap) &lt;- rowRanges(rse_gene_SRP045638)$gene_name[ match(rownames(exprs_heatmap), rowRanges(rse_gene_SRP045638)$gene_id) ] ## Vean que tambien podriamos haber usado rank() identical( which(rank(de_results$adj.P.Val) &lt;= 50), match(nombres_originales, rowRanges(rse_gene_SRP045638)$gene_id) ) ## [1] TRUE ## Esta es otra solución identical( de_results$gene_name[rank(de_results$adj.P.Val) &lt;= 50], rownames(exprs_heatmap) ) ## [1] TRUE ## Por último podemos cambiar el valor de show_rownames de FALSE a TRUE pheatmap( exprs_heatmap, cluster_rows = TRUE, cluster_cols = TRUE, show_rownames = TRUE, show_colnames = FALSE, annotation_col = df ) ## Guardar la imagen en un PDF largo para poder ver los nombres de los genes pdf(&quot;pheatmap_con_nombres.pdf&quot;, height = 14, useDingbats = FALSE) pheatmap( exprs_heatmap, cluster_rows = TRUE, cluster_cols = TRUE, show_rownames = TRUE, show_colnames = FALSE, annotation_col = df ) dev.off() ## pdf ## 3 5.9 Sobre centering y scaling en heatmaps ## Versión con centering y scaling en los renglones (los genes) pheatmap::pheatmap( exprs_heatmap, cluster_rows = TRUE, cluster_cols = TRUE, show_rownames = TRUE, show_colnames = FALSE, annotation_col = df, scale = &quot;row&quot; ) También podemos hacer una versión con ComplexHeatmap https://bioconductor.org/packages/ComplexHeatmap/. ## Misma versión pero ahora con ComplexHeatmap en vez del paquete pheatmap ComplexHeatmap::pheatmap( exprs_heatmap, cluster_rows = TRUE, cluster_cols = TRUE, show_rownames = TRUE, show_colnames = FALSE, annotation_col = df, scale = &quot;row&quot; ) 5.10 Específicaciones del proyecto Con datos de algún estudio disponible vía recount3, hagan un análisis de expresión diferencial. Incluyan al menos 3 gráficas en su reporte. Incluyan al menos un párrafo de interpretación biológica de los resultados. Su reporte debe ser público y estar listado en la página del curso. Suena fácil, pero cada estudio tiene sus complejidades. Hay muchos paquetes que no vimos que les pueden llamar la atención, tal como ideal. En http://research.libd.org/SPEAQeasy-example/bootcamp_intro o en https://lcolladotor.github.io/cshl_rstats_genome_scale_2024/ pueden encontrar varias gráficas que tal vez les quieran reproducir. En fin, ¡esto solo es el inicio! 🎉🎉🎉Our new MS is finally out! Given the timing, Santa had an early round with us 🎅💡https://t.co/a0dHFGWN7V, \"ideal: an R/Bioconductor package for interactive differential expression analysis\".I promise a proper #rstats hexsticker will follow, for now enjoy the package 😉 — Federico Marini (@FedeBioinfo) December 10, 2020 "],["smokingmouse.html", "6 smokingMouse", " 6 smokingMouse Impartida por Daianna González Padilla Tutorial Expresión diferencial Código: LieberInstitute/smoking-nicotine-mouse Notas públicas de Daianna: Notion. "],["revisión.html", "7 Revisión 7.1 Ejercicio en equipo 7.2 Respuestas", " 7 Revisión ¿Debemos explorar las relaciones entre nuestras variables con información de nuestras muestras previo a hacer un análisis de expresión diferencial? ¿Por qué usamos el paquete edgeR? ¿Por qué es importante el argumento sort.by en topTable()? ¿Por qué es importante el argumento coef en topTable()? Usemos los datos de http://research.libd.org/SPEAQeasy-example/bootcamp_intro speaqeasy_data &lt;- file.path(tempdir(), &quot;rse_speaqeasy.RData&quot;) download.file(&quot;https://github.com/LieberInstitute/SPEAQeasy-example/blob/master/rse_speaqeasy.RData?raw=true&quot;, speaqeasy_data, mode = &quot;wb&quot;) library(&quot;SummarizedExperiment&quot;) load(speaqeasy_data, verbose = TRUE) ## Loading objects: ## rse_gene rse_gene ## class: RangedSummarizedExperiment ## dim: 60609 40 ## metadata(0): ## assays(1): counts ## rownames(60609): ENSG00000223972.5 ENSG00000227232.5 ... ENSG00000210195.2 ENSG00000210196.2 ## rowData names(10): Length gencodeID ... NumTx gencodeTx ## colnames(40): R13896_H7JKMBBXX R13903_HCTYLBBXX ... R15120_HFY2MBBXX R15134_HFFGHBBXX ## colData names(67): SAMPLE_ID FQCbasicStats ... AgeDeath BrNum ¿Cuantos genes y muestras tenemos en estos datos? 7.1 Ejercicio en equipo ¿Hay diferencias en totalAssignedGene o mitoRate entre los grupos de diagnosis (PrimaryDx)? Grafica la expresión de SNAP25 para cada grupo de diagnosis. Sugiere un modelo estadistico que podríamos usar en una análisis de expresión diferencial. Verifica que si sea un modelo full rank. ¿Cúal sería el o los coeficientes de interés? 7.2 Respuestas ## Exploremos la variable de PrimaryDx table(rse_gene$PrimaryDx) ## ## Bipolar Control Other ## 20 20 0 ## Eliminemos el diagnosis &quot;Other&quot; porque no tiene información rse_gene$PrimaryDx &lt;- droplevels(rse_gene$PrimaryDx) table(rse_gene$PrimaryDx) ## ## Bipolar Control ## 20 20 ## Exploremos numéricamente diferencias entre grupos de diagnosis para ## varias variables with(colData(rse_gene), tapply(totalAssignedGene, PrimaryDx, summary)) ## $Bipolar ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.09529 0.24454 0.29773 0.28867 0.34662 0.38358 ## ## $Control ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.1384 0.2575 0.2895 0.2984 0.3537 0.4073 with(colData(rse_gene), tapply(mitoRate, PrimaryDx, summary)) ## $Bipolar ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.01297 0.01555 0.01735 0.01818 0.01980 0.03019 ## ## $Control ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.01194 0.01564 0.01911 0.02029 0.02439 0.03037 ## Podemos hacer lo mismo para otras variables with(colData(rse_gene), tapply(mitoRate, BrainRegion, summary)) ## $Amygdala ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.01302 0.01706 0.02029 0.02097 0.02437 0.03037 ## ## $sACC ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.01194 0.01449 0.01686 0.01749 0.01836 0.03019 ## Podemos resolver la primeras preguntas con iSEE if (interactive()) iSEE::iSEE(rse_gene) ## O hacer graficas nosotros mismos. Aquí les muestro una posible respuesta ## con ggplot2 library(&quot;ggplot2&quot;) ggplot( as.data.frame(colData(rse_gene)), aes(y = totalAssignedGene, group = PrimaryDx, x = PrimaryDx) ) + geom_boxplot() + theme_bw(base_size = 20) + xlab(&quot;Diagnosis&quot;) ggplot( as.data.frame(colData(rse_gene)), aes(y = totalAssignedGene, group = paste0(PrimaryDx, &quot;_&quot;, BrainRegion), x = paste0(PrimaryDx, &quot;_&quot;, BrainRegion)) ) + geom_boxplot() + theme_bw(base_size = 20) + xlab(&quot;Diagnosis&quot;) ggplot( as.data.frame(colData(rse_gene)), aes(y = mitoRate, group = PrimaryDx, x = PrimaryDx) ) + geom_boxplot() + theme_bw(base_size = 20) + xlab(&quot;Diagnosis&quot;) ggplot( as.data.frame(colData(rse_gene)), aes(y = mitoRate, group = paste0(PrimaryDx, &quot;_&quot;, BrainRegion), x = paste0(PrimaryDx, &quot;_&quot;, BrainRegion)) ) + geom_boxplot() + theme_bw(base_size = 20) + xlab(&quot;Diagnosis&quot;) ## Otras variables ggplot( as.data.frame(colData(rse_gene)), aes(y = mitoRate, group = BrainRegion, x = BrainRegion) ) + geom_boxplot() + theme_bw(base_size = 20) + xlab(&quot;Brain Region&quot;) ## Encontremos el gene SNAP25 rowRanges(rse_gene) ## GRanges object with 60609 ranges and 10 metadata columns: ## seqnames ranges strand | Length gencodeID ensemblID gene_type ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;integer&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## ENSG00000223972.5 chr1 11869-13670 + | 1735 ENSG00000223972.5 ENSG00000223972 transcribed_unproces.. ## ENSG00000227232.5 chr1 14404-29570 - | 1351 ENSG00000227232.5 ENSG00000227232 unprocessed_pseudogene ## ENSG00000278267.1 chr1 17369-17436 - | 68 ENSG00000278267.1 ENSG00000278267 miRNA ## ENSG00000243485.5 chr1 29554-31097 + | 1021 ENSG00000243485.5 ENSG00000243485 lncRNA ## ENSG00000284332.1 chr1 30366-30503 + | 138 ENSG00000284332.1 ENSG00000284332 miRNA ## ... ... ... ... . ... ... ... ... ## ENSG00000198695.2 chrM 14149-14673 - | 525 ENSG00000198695.2 ENSG00000198695 protein_coding ## ENSG00000210194.1 chrM 14674-14742 - | 69 ENSG00000210194.1 ENSG00000210194 Mt_tRNA ## ENSG00000198727.2 chrM 14747-15887 + | 1141 ENSG00000198727.2 ENSG00000198727 protein_coding ## ENSG00000210195.2 chrM 15888-15953 + | 66 ENSG00000210195.2 ENSG00000210195 Mt_tRNA ## ENSG00000210196.2 chrM 15956-16023 - | 68 ENSG00000210196.2 ENSG00000210196 Mt_tRNA ## Symbol EntrezID Class meanExprs NumTx gencodeTx ## &lt;character&gt; &lt;integer&gt; &lt;character&gt; &lt;numeric&gt; &lt;integer&gt; &lt;character&gt; ## ENSG00000223972.5 DDX11L1 &lt;NA&gt; InGen 0.00347263 2 ENST00000456328.2;EN.. ## ENSG00000227232.5 WASH7P &lt;NA&gt; InGen 1.57167877 1 ENST00000488147.1 ## ENSG00000278267.1 MIR6859-1 &lt;NA&gt; InGen 7.74437941 1 ENST00000619216.1 ## ENSG00000243485.5 MIR1302-2HG &lt;NA&gt; InGen 0.01403484 2 ENST00000473358.1;EN.. ## ENSG00000284332.1 MIR1302-2 &lt;NA&gt; InGen 0.00000000 1 ENST00000607096.1 ## ... ... ... ... ... ... ... ## ENSG00000198695.2 MT-ND6 4541 InGen 182.92863 1 ENST00000361681.2 ## ENSG00000210194.1 MT-TE &lt;NA&gt; InGen 9.80684 1 ENST00000387459.1 ## ENSG00000198727.2 MT-CYB 4519 InGen 826.87424 1 ENST00000361789.2 ## ENSG00000210195.2 MT-TT &lt;NA&gt; InGen 276.37225 1 ENST00000387460.2 ## ENSG00000210196.2 MT-TP &lt;NA&gt; InGen 366.58138 1 ENST00000387461.2 ## ------- ## seqinfo: 25 sequences from an unspecified genome; no seqlengths ## En este objeto los nombres de los genes vienen en la variable &quot;Symbol&quot; i &lt;- which(rowRanges(rse_gene)$Symbol == &quot;SNAP25&quot;) i ## [1] 54098 ## Para graficar con ggplot2, hagamos un pequeño data.frame df &lt;- data.frame( expression = assay(rse_gene)[i, ], Dx = rse_gene$PrimaryDx ) ## Ya teniendo el pequeño data.frame, podemos hacer la gráfica ggplot(df, aes(y = log2(expression + 0.5), group = Dx, x = Dx)) + geom_boxplot() + theme_bw(base_size = 20) + xlab(&quot;Diagnosis&quot;) + ylab(&quot;SNAP25: log2(x + 0.5)&quot;) ## https://bioconductor.org/packages/release/bioc/vignettes/scater/inst/doc/overview.html#3_Visualizing_expression_values scater::plotExpression( as(rse_gene, &quot;SingleCellExperiment&quot;), features = rownames(rse_gene)[i], x = &quot;PrimaryDx&quot;, exprs_values = &quot;counts&quot;, colour_by = &quot;BrainRegion&quot;, xlab = &quot;Diagnosis&quot; ) if (requireNamespace(&quot;plotly&quot;, quietly = TRUE)) { ## Lo pueden instalar con # install.packages(&quot;plotly&quot;) ## Guardemos el resultado de plotExpression() p &lt;- scater::plotExpression( as(rse_gene, &quot;SingleCellExperiment&quot;), features = rownames(rse_gene)[i], x = &quot;PrimaryDx&quot;, exprs_values = &quot;counts&quot;, colour_by = &quot;BrainRegion&quot;, xlab = &quot;Diagnosis&quot; ) ## scater::plotExpression() regresa un objeto de clase ggplot class(p) ## así que podemos usar plotly para crear una versión ## interactiva plotly::ggplotly(p) } ## Para el model estadístico exploremos la información de las muestras colnames(colData(rse_gene)) ## [1] &quot;SAMPLE_ID&quot; &quot;FQCbasicStats&quot; &quot;perBaseQual&quot; ## [4] &quot;perTileQual&quot; &quot;perSeqQual&quot; &quot;perBaseContent&quot; ## [7] &quot;GCcontent&quot; &quot;Ncontent&quot; &quot;SeqLengthDist&quot; ## [10] &quot;SeqDuplication&quot; &quot;OverrepSeqs&quot; &quot;AdapterContent&quot; ## [13] &quot;KmerContent&quot; &quot;SeqLength_R1&quot; &quot;percentGC_R1&quot; ## [16] &quot;phred20-21_R1&quot; &quot;phred48-49_R1&quot; &quot;phred76-77_R1&quot; ## [19] &quot;phred100-101_R1&quot; &quot;phredGT30_R1&quot; &quot;phredGT35_R1&quot; ## [22] &quot;Adapter50-51_R1&quot; &quot;Adapter70-71_R1&quot; &quot;Adapter90_R1&quot; ## [25] &quot;SeqLength_R2&quot; &quot;percentGC_R2&quot; &quot;phred20-21_R2&quot; ## [28] &quot;phred48-49_R2&quot; &quot;phred76-77_R2&quot; &quot;phred100-101_R2&quot; ## [31] &quot;phredGT30_R2&quot; &quot;phredGT35_R2&quot; &quot;Adapter50-51_R2&quot; ## [34] &quot;Adapter70-71_R2&quot; &quot;Adapter90_R2&quot; &quot;bamFile&quot; ## [37] &quot;trimmed&quot; &quot;numReads&quot; &quot;numMapped&quot; ## [40] &quot;numUnmapped&quot; &quot;overallMapRate&quot; &quot;concordMapRate&quot; ## [43] &quot;totalMapped&quot; &quot;mitoMapped&quot; &quot;mitoRate&quot; ## [46] &quot;totalAssignedGene&quot; &quot;gene_Assigned&quot; &quot;gene_Unassigned_Unmapped&quot; ## [49] &quot;gene_Unassigned_Read_Type&quot; &quot;gene_Unassigned_Singleton&quot; &quot;gene_Unassigned_MappingQuality&quot; ## [52] &quot;gene_Unassigned_Chimera&quot; &quot;gene_Unassigned_FragmentLength&quot; &quot;gene_Unassigned_Duplicate&quot; ## [55] &quot;gene_Unassigned_MultiMapping&quot; &quot;gene_Unassigned_Secondary&quot; &quot;gene_Unassigned_NonSplit&quot; ## [58] &quot;gene_Unassigned_NoFeatures&quot; &quot;gene_Unassigned_Overlapping_Length&quot; &quot;gene_Unassigned_Ambiguity&quot; ## [61] &quot;rRNA_rate&quot; &quot;BrainRegion&quot; &quot;Race&quot; ## [64] &quot;PrimaryDx&quot; &quot;Sex&quot; &quot;AgeDeath&quot; ## [67] &quot;BrNum&quot; ## Podemos usar región del cerebro porque tenemos suficientes datos table(rse_gene$BrainRegion) ## ## Amygdala sACC ## 20 20 ## Pero no podemos usar &quot;Race&quot; porque son solo de 1 tipo table(rse_gene$Race) ## ## CAUC ## 40 ## Ojo! Acá es importante que hayamos usado droplevels(rse_gene$PrimaryDx) ## si no, vamos a tener un modelo que no sea _full rank_ mod &lt;- with( colData(rse_gene), model.matrix(~ PrimaryDx + totalAssignedGene + mitoRate + rRNA_rate + BrainRegion + Sex + AgeDeath) ) ## Exploremos el modelo de forma interactiva if (interactive()) { ## Tenemos que eliminar columnas que tienen NAs. info_no_NAs &lt;- colData(rse_gene)[, c( &quot;PrimaryDx&quot;, &quot;totalAssignedGene&quot;, &quot;rRNA_rate&quot;, &quot;BrainRegion&quot;, &quot;Sex&quot;, &quot;AgeDeath&quot;, &quot;mitoRate&quot;, &quot;Race&quot; )] ExploreModelMatrix::ExploreModelMatrix( info_no_NAs, ~ PrimaryDx + totalAssignedGene + mitoRate + rRNA_rate + BrainRegion + Sex + AgeDeath ) ## Veamos un modelo más sencillo sin las variables numéricas (continuas) porque ## ExploreModelMatrix nos las muestra como si fueran factors (categoricas) ## en vez de continuas ExploreModelMatrix::ExploreModelMatrix( info_no_NAs, ~ PrimaryDx + BrainRegion + Sex ) ## Si agregamos + Race nos da errores porque Race solo tiene 1 opción # ExploreModelMatrix::ExploreModelMatrix( # info_no_NAs, # ~ PrimaryDx + BrainRegion + Sex + Race # ) } ¿Quieres más datos? Tenemos muchos en LIBD incluyendo http://eqtl.brainseq.org/phase2/. "],["rbioconductor-powered-team-data-science.html", "8 R/Bioconductor-powered Team Data Science", " 8 R/Bioconductor-powered Team Data Science https://lcolladotor.github.io/ "],["spatiallibd.html", "9 spatialLIBD", " 9 spatialLIBD 🔥off the press! 👀 our @biorxivpreprint on human 🧠brain @LieberInstitute spatial 🌌🔬transcriptomics data 🧬using Visium @10xGenomics🎉#spatialLIBD🔍https://t.co/RTW0VscUKR 👩🏾‍💻https://t.co/bsg04XKONr📚https://t.co/FJDOOzrAJ6📦https://t.co/Au5jwADGhYhttps://t.co/PiWEDN9q2N pic.twitter.com/aWy0yLlR50 — 🇲🇽 Leonardo Collado-Torres (@lcolladotor) February 29, 2020 Diapositivas de mis pláticas anteriores están disponibles en https://speakerdeck.com/lcolladotor. Platicas grabadas Usta es la versión de un webinar para BioTuring que pueden ver a través de YouTube Aquí hay una versión anterior: Artículo: https://doi.org/10.1038/s41593-020-00787-0 Software: http://research.libd.org/spatialLIBD/ o spatialLIBD Interfaz de shiny: http://spatial.libd.org/spatialLIBD/ Libro (en construcción) donde explicamos como usar varias herramientas: https://lmweber.org/BestPracticesST/ Artículo sobre SpatialExperiment http://dx.doi.org/10.1093/bioinformatics/btac299 Are you working with spatial transcriptomics data such as Visium from @10xGenomics? Then you'll be interested in #SpatialExperiment 📦 led by @drighelli @lmwebr @CrowellHL with contributions by @PardoBree @shazanfar A Lun @stephaniehicks @drisso1893 🌟📜 https://t.co/r36qlakRJe pic.twitter.com/cWIiwLFitV — 🇲🇽 Leonardo Collado-Torres (@lcolladotor) January 29, 2021 Brenda Pardo https://twitter.com/PardoBree Today I gave my first talk at a congress in #EuroBioc2020 about our work on adapting the package #spatialLIBD to use VisiumExperiment objects. pic.twitter.com/U23yE32RWM — Brenda Pardo (@PardoBree) December 14, 2020 Our paper describing our package #spatialLIBD is finally out! 🎉🎉🎉spatialLIBD is an #rstats / @Bioconductor package to visualize spatial transcriptomics data.⁰This is especially exciting for me as it is my first paper as a first author 🦑.https://t.co/COW013x4GA1/9 pic.twitter.com/xevIUg3IsA — Brenda Pardo (@PardoBree) April 30, 2021 "],["comunidad-4.html", "10 Comunidad 10.1 De alumnos LCG 2021 10.2 De ustedes", " 10 Comunidad https://mircommunity.com/ https://bsky.app/profile/rainbowr.org https://twitter.com/conecta_R https://bsky.app/profile/latinrconf.bsky.social https://r-consortium.org/ https://rweekly.org/ https://bsky.app/profile/rladies.org https://twitter.com/RLadiesBmore https://twitter.com/search?q=%23RLadiesMX&amp;src=typed_query The blog post about the First annual meeting of #RLadiesMX is ready!! All #rladies chapters in México met for the first time! 🤩 Spread the word and join this amazing community 💜https://t.co/evY4Tc18rw Thanks @AnaBetty2304 @Averi_GG and @josschavezf1 for all your work! — RLadies Cuernavaca (@RLadiesCuerna) January 30, 2021 https://bsky.app/profile/bioconductor.bsky.social https://bsky.app/profile/ropensci.org https://bsky.app/profile/libdrstats.bsky.social https://bsky.app/profile/cdsbmexico.bsky.social ¡Chequen el nuevo blog post de Erick @ErickCuevasF! 💯Nos describe sus experiencias en #BioC2020 y #CDSB2020Además estamos orgullxs de que Erick se unió a la Junta Directiva de la CDSB 🤩🎉👀 https://t.co/uGpgnqXvVM#rstatsES pic.twitter.com/O2eIbk5YoZ — ComunidadBioInfo (@CDSBMexico) August 21, 2020 10.1 De alumnos LCG 2021 @fikandata @MqElizabeth Looking for a solid and useful R 📦, we stumbled upon this beauty 🤩 https://t.co/KR3twAxqRYshoutouts to @digitalwright 👈!!@lcolladotor @Bioconductor — Axel Zagal Norman (@NormanZagal) February 24, 2021 In today's lesson of bioinformatics course of undergraduate program in genomic sciences @lcgunam we created our first personal page using @seankross' postcards R package with @lcolladotor as our instructor. #rstats https://t.co/sXUSietCZy — Angel Castillo (@angelcaztle13) February 24, 2021 Wake up Brew some @tyulmalcafe beans Attend @lcolladotor amazing class on visualizing expression data using ISEE @FedeBioinfo @KevinRUE67 @CSoneson Am I dreaming? Nah! Mug is empty. — Alfredo Varela (@fikandata) February 24, 2021 Today I learned how to visualize data in a cool and easy way in @lcolladotor 's class. ExploreModelMatrix definitely makes your life easier! Shoutouts to:@CSoneson @FedeBioinfo @mikelove — Axel Zagal Norman (@NormanZagal) February 25, 2021 10.2 De ustedes ?? "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
